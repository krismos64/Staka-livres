#!/usr/bin/env bash
set -eo pipefail

# Script de d√©ploiement VPS pour Staka-Livres
# Usage: ./scripts/deploy-vps.sh [version] [--dry-run] [--force] [--no-backup]

# Configuration par d√©faut
DEFAULT_VERSION="latest"
VERSION="${1:-$DEFAULT_VERSION}"
DRY_RUN=false
FORCE_DEPLOY=false
CREATE_BACKUP=true
DEPLOY_DIR="/opt/staka-livres"

# Variables d'environnement requises
REQUIRED_VARS=(
    "VPS_HOST"
    "VPS_USER"
    "DOCKERHUB_USER"
    "DOCKERHUB_TOKEN"
)

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonctions utilitaires
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

show_usage() {
    cat << EOF
Usage: $0 [version] [options]

Arguments:
  [version]           Version √† d√©ployer (d√©faut: latest)

Options:
  --dry-run          Simulation du d√©ploiement sans execution
  --force            Force le d√©ploiement m√™me si la version existe
  --no-backup        Skip la sauvegarde avant d√©ploiement
  --help             Affiche cette aide

Variables d'environnement requises:
  VPS_HOST           Adresse du serveur VPS
  VPS_USER           Utilisateur SSH pour le VPS
  DOCKERHUB_USER     Nom d'utilisateur Docker Hub
  DOCKERHUB_TOKEN    Token d'authentification Docker Hub

Variables optionnelles:
  DOCKER_REGISTRY    Registry Docker (d√©faut: krismos64)
  SSH_KEY_PATH       Chemin vers la cl√© SSH (d√©faut: ~/.ssh/id_rsa)

Exemples:
  $0                              # D√©ploie la version 'latest'
  $0 v1.4.0                      # D√©ploie la version v1.4.0
  $0 v1.4.0 --dry-run           # Simulation du d√©ploiement v1.4.0
  $0 latest --force --no-backup  # Force le d√©ploiement sans backup

Configuration via .env.deploy:
  VPS_HOST=mon-serveur.ovh.com
  VPS_USER=ubuntu
  DOCKERHUB_USER=krismos64
  DOCKERHUB_TOKEN=dckr_pat_xxxxx
EOF
}

# Chargement des variables d'environnement
load_env_vars() {
    local env_file=".env.deploy"
    
    if [[ -f "$env_file" ]]; then
        log_info "Chargement des variables depuis $env_file"
        set -a
        source "$env_file"
        set +a
    fi
    
    # V√©rification des variables requises
    local missing_vars=()
    for var in "${REQUIRED_VARS[@]}"; do
        if [[ -z "${!var:-}" ]]; then
            missing_vars+=("$var")
        fi
    done
    
    if [[ ${#missing_vars[@]} -gt 0 ]]; then
        log_error "Variables d'environnement manquantes: ${missing_vars[*]}"
        log_error "Cr√©ez un fichier .env.deploy ou d√©finissez ces variables"
        show_usage
        exit 1
    fi
    
    # Variables par d√©faut
    DOCKER_REGISTRY="${DOCKER_REGISTRY:-krismos64}"
    SSH_KEY_PATH="${SSH_KEY_PATH:-$HOME/.ssh/id_rsa}"
    
    # Configuration de la commande SSH selon la m√©thode d'authentification
    if [[ -n "$SSH_KEY_PATH" && -f "$SSH_KEY_PATH" ]]; then
        SSH_CMD="ssh -i $SSH_KEY_PATH -o ConnectTimeout=10 -o BatchMode=yes"
        log_info "Authentification SSH: cl√© priv√©e ($SSH_KEY_PATH)"
    elif [[ -n "$VPS_PASSWORD" ]]; then
        SSH_CMD="sshpass -p $VPS_PASSWORD ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no"
        log_info "Authentification SSH: mot de passe"
    else
        log_error "Aucune m√©thode d'authentification SSH configur√©e"
        log_error "D√©finissez SSH_KEY_PATH ou VPS_PASSWORD dans .env.deploy"
        exit 1
    fi
    
    log_success "Variables d'environnement valid√©es"
}

# Test de connexion SSH
test_ssh_connection() {
    log_info "Test de la connexion SSH vers $VPS_USER@$VPS_HOST"
    
    if $SSH_CMD "$VPS_USER@$VPS_HOST" 'echo "SSH OK"' &>/dev/null; then
        log_success "Connexion SSH √©tablie"
        return 0
    fi
    
    log_error "Impossible de se connecter au VPS"
    log_error "V√©rifiez: $VPS_HOST, $VPS_USER, authentification"
    exit 1
}

# Fonction helper pour ex√©cuter des commandes SSH
run_ssh_command() {
    local command="$1"
    $SSH_CMD "$VPS_USER@$VPS_HOST" "$command"
}


# V√©rification de l'√©tat du serveur distant
check_remote_status() {
    log_info "V√©rification de l'√©tat du serveur distant..."
    
    local remote_check=$($SSH_CMD "$VPS_USER@$VPS_HOST" << 'EOF'
# V√©rification Docker
if ! command -v docker &> /dev/null; then
    echo "ERROR: Docker non install√©"
    exit 1
fi

# V√©rification du r√©pertoire de d√©ploiement
if [[ ! -d "/opt/staka-livres" ]]; then
    echo "WARNING: R√©pertoire de d√©ploiement inexistant"
fi

# √âtat des services actuels
if docker compose -f /opt/staka-livres/docker-compose.prod.yml ps --quiet &>/dev/null; then
    echo "INFO: Services Docker actuellement actifs"
    docker compose -f /opt/staka-livres/docker-compose.prod.yml ps --format "table {{.Name}}\t{{.Status}}"
else
    echo "INFO: Aucun service Docker actif"
fi

echo "SUCCESS: Serveur pr√™t pour le d√©ploiement"
EOF
    )
    
    echo "$remote_check"
    
    if echo "$remote_check" | grep -q "ERROR:"; then
        log_error "Le serveur distant n'est pas pr√™t"
        exit 1
    fi
    
    log_success "Serveur distant op√©rationnel"
}

# Sauvegarde avant d√©ploiement
create_backup() {
    if [[ "$CREATE_BACKUP" != true ]]; then
        log_warning "Sauvegarde d√©sactiv√©e (--no-backup)"
        return 0
    fi
    
    local backup_timestamp=$(date +"%Y%m%d_%H%M%S")
    local backup_name="staka_backup_${backup_timestamp}"
    
    log_info "Cr√©ation de la sauvegarde: $backup_name"
    
    if [[ "$DRY_RUN" == true ]]; then
        log_info "[DRY-RUN] Sauvegarde simul√©e"
        return 0
    fi
    
    $SSH_CMD "$VPS_USER@$VPS_HOST" << EOF
# Cr√©ation du r√©pertoire de backup
mkdir -p /opt/backups

# Sauvegarde de la base de donn√©es
if docker compose -f $DEPLOY_DIR/docker-compose.prod.yml exec -T db mysqldump -u staka -p\$MYSQL_PASSWORD stakalivres > /opt/backups/${backup_name}_db.sql 2>/dev/null; then
    echo "‚úì Sauvegarde DB cr√©√©e"
else
    echo "‚ö† √âchec sauvegarde DB (service peut-√™tre arr√™t√©)"
fi

# Sauvegarde des fichiers de configuration
if [[ -d "$DEPLOY_DIR" ]]; then
    tar -czf /opt/backups/${backup_name}_config.tar.gz -C $DEPLOY_DIR . 2>/dev/null
    echo "‚úì Sauvegarde config cr√©√©e"
fi

# Nettoyage des anciennes sauvegardes (garde les 5 derni√®res)
cd /opt/backups && ls -t staka_backup_*.sql 2>/dev/null | tail -n +6 | xargs rm -f
cd /opt/backups && ls -t staka_backup_*.tar.gz 2>/dev/null | tail -n +6 | xargs rm -f

echo "‚úì Sauvegarde termin√©e: $backup_name"
EOF
    
    log_success "Sauvegarde cr√©√©e avec succ√®s"
}

# D√©ploiement principal
deploy_to_vps() {
    log_info "D√©ploiement de la version '$VERSION' sur $VPS_HOST"
    
    if [[ "$DRY_RUN" == true ]]; then
        log_info "[DRY-RUN] Simulation du d√©ploiement"
        return 0
    fi
    
    # Script de d√©ploiement distant  
    $SSH_CMD "$VPS_USER@$VPS_HOST" << EOF
set -eo pipefail

echo "üöÄ D√©but du d√©ploiement..."

# Authentification Docker Hub
echo "üîê Authentification Docker Hub..."
echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USER" --password-stdin

# Navigation vers le r√©pertoire de d√©ploiement
cd $DEPLOY_DIR

# Pull des nouvelles images
echo "üì¶ Pull des images version '$VERSION'..."
export TAG=$VERSION
export DOCKER_REGISTRY=$DOCKER_REGISTRY

docker compose -f docker-compose.prod.yml pull

# Arr√™t gracieux des services
echo "‚èπÔ∏è  Arr√™t des services actuels..."
docker compose -f docker-compose.prod.yml down --remove-orphans || true

# Nettoyage des ressources inutilis√©es
echo "üßπ Nettoyage du syst√®me..."
docker system prune -f --volumes || true

# Red√©marrage des services
echo "‚ñ∂Ô∏è  D√©marrage des nouveaux services..."
docker compose -f docker-compose.prod.yml up -d --remove-orphans

# Attente que les services soient healthy
echo "‚è≥ Attente de la sant√© des services..."
for i in {1..30}; do
    if docker compose -f docker-compose.prod.yml ps --format json | jq -r '.[].Health' | grep -v "healthy" | grep -q .; then
        echo "‚è≥ Services en cours de d√©marrage (\$i/30)..."
        sleep 10
    else
        echo "‚úÖ Tous les services sont healthy"
        break
    fi
    
    if [[ \$i -eq 30 ]]; then
        echo "‚ö†Ô∏è  Timeout: certains services ne sont pas healthy"
        docker compose -f docker-compose.prod.yml ps
    fi
done

# V√©rification finale
echo "üîç V√©rification finale..."
docker compose -f docker-compose.prod.yml ps

echo "‚úÖ D√©ploiement termin√© avec succ√®s!"
EOF
    
    log_success "D√©ploiement completed"
}

# V√©rification post-d√©ploiement
post_deploy_check() {
    log_info "V√©rification post-d√©ploiement..."
    
    local health_checks=(
        "https://livrestaka.fr/health"
        "https://api.staka-livres.com/health"
    )
    
    for url in "${health_checks[@]}"; do
        log_info "Test de $url"
        
        if curl -f -s --max-time 10 "$url" > /dev/null; then
            log_success "‚úì $url OK"
        else
            log_warning "‚ö† $url non accessible (peut √™tre normal si juste d√©ploy√©)"
        fi
    done
    
    # √âtat des services
    log_info "√âtat final des services:"
    $SSH_CMD "$VPS_USER@$VPS_HOST" \
        "cd $DEPLOY_DIR && docker compose -f docker-compose.prod.yml ps --format 'table {{.Name}}\t{{.Status}}\t{{.Ports}}'"
}

# Fonction principale
main() {
    # Parse des arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --dry-run)
                DRY_RUN=true
                shift
                ;;
            --force)
                FORCE_DEPLOY=true
                shift
                ;;
            --no-backup)
                CREATE_BACKUP=false
                shift
                ;;
            --help|-h)
                show_usage
                exit 0
                ;;
            --*)
                log_error "Option inconnue: $1"
                show_usage
                exit 1
                ;;
            *)
                # C'est la version si pas encore d√©finie
                if [[ "$VERSION" == "$DEFAULT_VERSION" ]]; then
                    VERSION="$1"
                fi
                shift
                ;;
        esac
    done
    
    # Validation de la version
    if [[ ! "$VERSION" =~ ^[a-zA-Z0-9._-]+$ ]]; then
        log_error "Version invalide: '$VERSION'"
        exit 1
    fi
    
    # Information sur la configuration
    log_info "=== Configuration du d√©ploiement ==="
    log_info "Version: $VERSION"
    log_info "VPS: $VPS_USER@$VPS_HOST"
    log_info "Registry: $DOCKER_REGISTRY"
    log_info "Dry run: $DRY_RUN"
    log_info "Force: $FORCE_DEPLOY"
    log_info "Backup: $CREATE_BACKUP"
    echo ""
    
    if [[ "$DRY_RUN" == true ]]; then
        log_warning "Mode simulation activ√© - aucune modification ne sera effectu√©e"
    fi
    
    # Ex√©cution des √©tapes
    local start_time=$(date +%s)
    
    load_env_vars
    test_ssh_connection
    check_remote_status
    create_backup
    deploy_to_vps
    
    if [[ "$DRY_RUN" != true ]]; then
        post_deploy_check
    fi
    
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    # R√©sum√© final
    echo ""
    if [[ "$DRY_RUN" == true ]]; then
        log_success "=== Simulation termin√©e ==="
    else
        log_success "=== D√©ploiement termin√© avec succ√®s ==="
    fi
    log_success "Version: $VERSION"
    log_success "Dur√©e: ${duration}s"
    
    if [[ "$DRY_RUN" != true ]]; then
        echo ""
        log_info "Services accessibles sur:"
        log_info "  Frontend: https://livrestaka.fr"
        log_info "  API: https://api.staka-livres.com"
        echo ""
        log_info "Pour v√©rifier les logs:"
        log_info "  ssh $VPS_USER@$VPS_HOST 'cd $DEPLOY_DIR && docker compose -f docker-compose.prod.yml logs -f'"
    fi
}

# Gestion des signaux pour cleanup
cleanup() {
    log_warning "D√©ploiement interrompu par l'utilisateur"
    exit 130
}

trap cleanup SIGINT SIGTERM

# Ex√©cution
main "$@"