#!/bin/bash
set -e

# Configuration
source .env.deploy

# Override avec les credentials locaux si le fichier existe
if [ -f .env.deploy.local ]; then
    source .env.deploy.local
    echo "üîë Credentials locaux charg√©s depuis .env.deploy.local"
fi

TAG=${1:-latest}
VPS_PROJECT_DIR="/opt/staka-livres"
echo "üöÄ D√©ploiement Staka-livres version: $TAG"

# 0. Tests de build locaux pour validation
echo "üß™ Test des builds localement avant d√©ploiement..."
docker buildx build --platform linux/amd64 -t $DOCKER_REGISTRY/frontend:test -f ./frontend/Dockerfile . || {
    echo "‚ùå ERREUR: Build frontend √©chou√©"
    exit 1
}
docker buildx build --platform linux/amd64 -t $DOCKER_REGISTRY/backend:test -f ./backend/Dockerfile . || {
    echo "‚ùå ERREUR: Build backend √©chou√©"
    exit 1
}
echo "‚úÖ Tests de build r√©ussis"

# 1. Build et push images production
echo "üì¶ Building images production..."
docker buildx build --platform linux/amd64 -t $DOCKER_REGISTRY/frontend:$TAG -f ./frontend/Dockerfile . --push || {
    echo "‚ùå ERREUR: Push frontend √©chou√©"
    exit 1
}
docker buildx build --platform linux/amd64 -t $DOCKER_REGISTRY/backend:$TAG -f ./backend/Dockerfile . --push || {
    echo "‚ùå ERREUR: Push backend √©chou√©"
    exit 1
}

echo "‚¨ÜÔ∏è Images pushed to Docker Hub with buildx"

# 2. Copie des fichiers de configuration sur le VPS
echo "üìù Copying production configuration files..."
sshpass -p $VPS_PASSWORD ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST "mkdir -p $VPS_PROJECT_DIR/frontend"
sshpass -p $VPS_PASSWORD scp -o StrictHostKeyChecking=no .env.prod $VPS_USER@$VPS_HOST:$VPS_PROJECT_DIR/.env.prod
sshpass -p $VPS_PASSWORD scp -o StrictHostKeyChecking=no docker-compose.prod.yml $VPS_USER@$VPS_HOST:$VPS_PROJECT_DIR/docker-compose.prod.yml
sshpass -p $VPS_PASSWORD scp -o StrictHostKeyChecking=no frontend/nginx-prod.conf $VPS_USER@$VPS_HOST:$VPS_PROJECT_DIR/frontend/nginx-prod.conf

# 3. D√©ploiement sur VPS
echo "üîÑ Deploying to VPS..."
sshpass -p $VPS_PASSWORD ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST << EOF
    cd $VPS_PROJECT_DIR
    
    # V√©rifier l'existence des fichiers n√©cessaires
    if [ ! -f docker-compose.prod.yml ]; then
        echo "‚ùå ERREUR: docker-compose.prod.yml introuvable dans $VPS_PROJECT_DIR"
        echo "üìç Contenu du r√©pertoire:"
        ls -la
        exit 1
    fi
    
    if [ ! -f frontend/nginx-prod.conf ]; then
        echo "‚ùå ERREUR: frontend/nginx-prod.conf introuvable"
        exit 1
    fi
    
    # V√©rifier que le fichier .env.prod a √©t√© copi√©
    if [ -f .env.prod ]; then
        echo "‚úÖ Fichiers de configuration d√©tect√©s"
        echo "üîç Variables critiques:"
        grep -E "STRIPE_SECRET_KEY|SENDGRID_API_KEY|ADMIN_EMAIL" .env.prod | sed 's/=.*/=***CONFIGUR√â***/'
    else
        echo "‚ùå ERREUR: Fichier .env.prod manquant!"
        exit 1
    fi
    
    # üßπ Nettoyage pr√©ventif des conteneurs conflictuels
    echo "üßπ Nettoyage pr√©ventif des anciens conteneurs..."
    docker stop \$(docker ps -aq) 2>/dev/null || true
    docker rm \$(docker ps -aq) 2>/dev/null || true
    
    # Pull et restart avec nouvelles variables
    echo "üì• Pull des nouvelles images..."
    docker compose -f docker-compose.prod.yml pull || {
        echo "‚ùå ERREUR: Pull des images √©chou√©"
        exit 1
    }
    
    # üîç D√©tection probl√®me MySQL downgrade et correction automatique
    echo "üîç V√©rification int√©grit√© base de donn√©es MySQL..."
    if [ -f /opt/staka/data/mysql/ib_logfile0 ]; then
        # Tenter de d√©marrer MySQL temporairement pour tester
        if ! docker run --rm -v /opt/staka/data/mysql:/var/lib/mysql mysql:8.0 mysqld --help >/dev/null 2>&1; then
            echo "‚ö†Ô∏è D√©tection probl√®me MySQL downgrade - Nettoyage automatique..."
            rm -rf /opt/staka/data/mysql
            mkdir -p /opt/staka/data/mysql
            echo "‚úÖ Volume MySQL nettoy√©"
        fi
    fi
    
    # D√©marrer avec les nouvelles images
    echo "üöÄ D√©marrage des nouveaux conteneurs..."
    docker compose -f docker-compose.prod.yml up -d || {
        echo "‚ùå ERREUR: D√©marrage des nouveaux conteneurs √©chou√©"
        exit 1
    }
    
    # üïê Attente intelligente du d√©marrage des services
    echo "‚è≥ Attente du d√©marrage des services..."
    for i in {1..10}; do
        sleep 3
        if docker compose -f docker-compose.prod.yml ps | grep -q "healthy"; then
            echo "‚úÖ Services d√©marr√©s"
            break
        fi
        echo "‚è≥ Tentative \$i/10..."
    done
    
    # üîÑ MIGRATIONS AUTOMATIQUES : Appliquer les nouvelles migrations
    echo "üîÑ Application des migrations de base de donn√©es..."
    docker compose -f docker-compose.prod.yml exec backend npx prisma migrate deploy || {
        echo "‚ö†Ô∏è AVERTISSEMENT: Migrations √©chou√©es, mais on continue"
    }
    
    # üå± SEED CONDITIONNEL : Seulement si base de donn√©es vide
    echo "üîç V√©rification si la base a besoin d'un seed initial..."
    USER_COUNT=\$(docker compose -f docker-compose.prod.yml exec backend npx prisma db execute --stdin <<< "SELECT COUNT(*) as count FROM users;" 2>/dev/null | grep -o '[0-9]' | head -1 || echo "0")
    
    if [ "\$USER_COUNT" = "0" ] || [ "\$USER_COUNT" = "" ]; then
        echo "üå± Base de donn√©es vide d√©tect√©e - Ex√©cution du seed de production..."
        docker compose -f docker-compose.prod.yml exec backend npx ts-node prisma/seed-prod.ts || {
            echo "‚ö†Ô∏è AVERTISSEMENT: Seed √©chou√©, mais on continue"
        }
    else
        echo "‚úÖ Base de donn√©es peupl√©e (\$USER_COUNT utilisateurs) - Seed ignor√©"
    fi
    
    # ü©∫ Tests de sant√© robustes des services
    echo "ü©∫ Tests de sant√© des services..."
    
    # Test frontend
    if curl -f --connect-timeout 10 --max-time 15 http://localhost:8080/health >/dev/null 2>&1; then
        echo "‚úÖ Frontend accessible sur port 8080"
    else
        echo "‚ö†Ô∏è Frontend non accessible sur port 8080"
    fi
    
    # Test backend via conteneur
    if docker compose -f docker-compose.prod.yml exec backend curl -f --connect-timeout 5 http://localhost:3000/health >/dev/null 2>&1; then
        echo "‚úÖ Backend accessible sur port 3000"
    else
        echo "‚ö†Ô∏è Backend non accessible sur port 3000"
    fi
    
    # Test API via nginx externe (test final)
    sleep 5
    if curl -f --connect-timeout 10 --max-time 15 https://livrestaka.fr/health >/dev/null 2>&1; then
        echo "‚úÖ Site HTTPS accessible via nginx externe"
    else
        echo "‚ö†Ô∏è Site HTTPS non accessible - v√©rifier nginx externe"
    fi
    
    # √âtat final des conteneurs
    echo "üìã √âtat final des conteneurs:"
    docker compose -f docker-compose.prod.yml ps
    
    # Cleanup des images inutiles
    echo "üßπ Nettoyage des anciens conteneurs et images..."
    docker system prune -f
EOF

# 4. Test de la configuration email apr√®s d√©ploiement
echo ""
echo "üìß TEST DE LA CONFIGURATION EMAIL"
echo "=================================="
echo "Copie du script de test email sur le VPS..."
sshpass -p $VPS_PASSWORD scp -o StrictHostKeyChecking=no scripts/test-email-prod.sh $VPS_USER@$VPS_HOST:$VPS_PROJECT_DIR/test-email-prod.sh

sshpass -p $VPS_PASSWORD ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST << EOF
    cd $VPS_PROJECT_DIR
    chmod +x test-email-prod.sh
    
    echo "Lancement du test d'envoi d'email..."
    ./test-email-prod.sh || echo "‚ö†Ô∏è Test email termin√© avec avertissements"
EOF

# 5. Validation finale et r√©sum√©
echo ""
echo "üéØ VALIDATION FINALE DU D√âPLOIEMENT"
echo "===================================="

# Test final API
if curl -f --connect-timeout 10 --max-time 15 https://livrestaka.fr/api/tarifs >/dev/null 2>&1; then
    echo "‚úÖ API fonctionnelle : https://livrestaka.fr/api/tarifs"
else
    echo "‚ö†Ô∏è API non accessible : https://livrestaka.fr/api/tarifs"
fi

# Test webhook
if curl -X POST --connect-timeout 10 --max-time 15 https://livrestaka.fr/payments/webhook -H "Content-Type: application/json" -d '{"test":true}' 2>&1 | grep -q "signature"; then
    echo "‚úÖ Webhook Stripe op√©rationnel : https://livrestaka.fr/payments/webhook"
else
    echo "‚ö†Ô∏è Webhook Stripe probl√©matique"
fi

echo ""
echo "üéâ D√âPLOIEMENT TERMIN√â !"
echo "======================="
echo "üåê Site principal    : https://livrestaka.fr"
echo "üîß API Backend      : https://livrestaka.fr/api"
echo "üí≥ Webhook Stripe   : https://livrestaka.fr/payments/webhook"
echo "üè• Health check     : https://livrestaka.fr/health"
echo ""
echo "üìã Configuration actuelle :"
echo "   - Version d√©ploy√©e : $TAG"
echo "   - Images Docker    : $DOCKER_REGISTRY/frontend:$TAG, $DOCKER_REGISTRY/backend:$TAG"
echo "   - Architecture     : nginx externe ‚Üí conteneurs ports 8080/3000"
echo "   - Base de donn√©es  : MySQL 8.0 avec migrations appliqu√©es"
echo "   - SSL/TLS         : Let's Encrypt (nginx externe)"
echo ""
echo "üîë Variables critiques configur√©es :"
echo "   - Stripe LIVE      : ‚úÖ Configur√©"
echo "   - Resend (Email)   : ‚úÖ Configur√© avec domaine v√©rifi√©" 
echo "   - Email admin      : ‚úÖ contact@staka.fr"
echo "   - FROM_EMAIL       : ‚úÖ noreply@livrestaka.fr"
echo ""
echo "‚ú® D√©ploiement r√©ussi ! Site pr√™t pour la production."