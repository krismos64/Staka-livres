name: Frontend Tests (Vitest + Cypress)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    name: Unit Tests (Vitest)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock

      - name: Install frontend dependencies
        working-directory: frontend
        run: yarn install --frozen-lockfile

      - name: Run Vitest unit tests
        working-directory: frontend
        run: yarn test:unit

  e2e-tests:
    runs-on: ubuntu-latest
    name: E2E Tests (Cypress)
    needs: unit-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install docker-compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Create test environment file
        run: |
          cp backend/.env.test backend/.env

      - name: Build and start services
        run: |
          docker-compose --profile test build --no-cache --parallel
          docker-compose --profile test up -d db backend frontend-dev

      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to be ready..."
          timeout 120s bash -c 'until curl -f http://localhost:3001/health 2>/dev/null; do sleep 2; done' || true
          echo "Backend is ready"
          timeout 120s bash -c 'until curl -f http://localhost:8080/ 2>/dev/null; do sleep 2; done' || true
          echo "Frontend-dev health check is ready"
          docker-compose ps

      - name: Check services status
        run: |
          docker-compose ps
          docker-compose logs --tail=50 backend
          docker-compose logs --tail=50 frontend-dev

      - name: Seed database for E2E tests
        run: |
          docker-compose exec -T backend npx prisma migrate reset --force --skip-seed
          docker-compose exec -T backend npx prisma db seed

      - name: Run Cypress E2E tests
        run: |
          docker-compose --profile test run --rm cypress

      - name: Upload Cypress screenshots on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: frontend/cypress/screenshots/
          retention-days: 7

      - name: Upload Cypress videos on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-videos
          path: frontend/cypress/videos/
          retention-days: 7

      - name: Stop services
        if: always()
        run: docker-compose down

  docker-health-check:
    runs-on: ubuntu-latest
    name: Docker Health Check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install docker-compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Create test environment file
        run: |
          cp backend/.env.test backend/.env

      - name: Verify Docker Compose configuration
        run: |
          docker-compose config

      - name: Build all services
        run: |
          docker-compose build

      - name: Start services with health checks
        run: |
          docker-compose up -d

      - name: Wait and verify all services are healthy
        run: |
          sleep 30
          docker-compose ps

      - name: Test frontend accessibility
        run: |
          curl -f http://localhost:3002 || exit 1

      - name: Test backend accessibility
        run: |
          curl -f http://localhost:3001/health || exit 1

      - name: Stop services
        if: always()
        run: docker-compose down
