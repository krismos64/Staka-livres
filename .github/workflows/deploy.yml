name: Build and Deploy to DockerHub

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

env:
  DOCKER_REGISTRY: stakalivres  # Remplacer par votre nom d'utilisateur DockerHub

jobs:
  # Tests (existants dans votre CI actuel)
  test-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            
      - name: Install dependencies
        working-directory: ./backend
        run: npm ci --legacy-peer-deps
        
      - name: Run tests
        working-directory: ./backend
        run: npm run test:ci
        env:
          AWS_ACCESS_KEY_ID: test-key
          AWS_SECRET_ACCESS_KEY: test-secret

  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci --legacy-peer-deps
        
      - name: Run tests
        working-directory: ./frontend
        run: npm run test:unit

  # Build et push des images Docker
  build-and-push:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    strategy:
      matrix:
        service: [frontend, backend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix=sha-
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.service }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  # Notification de d√©ploiement (optionnel)
  notify-deployment:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Notify deployment ready
        run: |
          echo "üöÄ Images Docker construites et publi√©es sur DockerHub"
          echo "Frontend: ${{ env.DOCKER_REGISTRY }}/frontend:latest"
          echo "Backend: ${{ env.DOCKER_REGISTRY }}/backend:latest"
          echo ""
          echo "Pour d√©ployer sur votre VPS:"
          echo "1. Connectez-vous √† votre VPS OVH"
          echo "2. Ex√©cutez: git pull origin main"
          echo "3. Ex√©cutez: ./deploy.sh production latest"

  # Job de d√©ploiement automatique (optionnel - √† configurer)
  # deploy-to-production:
  #   needs: [build-and-push]
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'
  #   environment: production
  #   
  #   steps:
  #     - name: Deploy to VPS
  #       uses: appleboy/ssh-action@v0.1.7
  #       with:
  #         host: ${{ secrets.VPS_HOST }}
  #         username: ${{ secrets.VPS_USERNAME }}
  #         key: ${{ secrets.VPS_SSH_KEY }}
  #         script: |
  #           cd /opt/staka-livres
  #           git pull origin main
  #           ./deploy.sh production latest