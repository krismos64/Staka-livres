openapi: 3.0.3
info:
  title: Staka Livres API
  description: API for the Staka Livres manuscript correction platform
  version: 2.0.0
  contact:
    name: Staka Livres
    email: contact@staka-editions.com

servers:
  - url: http://localhost:3001
    description: Development server
  - url: https://api.staka-editions.com
    description: Production server

paths:
  /projects:
    get:
      summary: Get user projects with pagination
      description: Retrieve projects for the authenticated user with pagination, filtering, and search capabilities
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number (starts from 1)
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of projects per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
        - name: status
          in: query
          description: Filter projects by status
          required: false
          schema:
            type: string
            enum: [all, active, pending, completed]
            default: all
        - name: search
          in: query
          description: Search projects by title (max 100 characters)
          required: false
          schema:
            type: string
            maxLength: 100
      responses:
        '200':
          description: Paginated list of user projects with metadata
          headers:
            X-Total-Count:
              description: Total number of projects matching the criteria
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
              example:
                data:
                  - id: "cmd-1-uuid"
                    title: "L'Écho du Temps"
                    type: "Roman"
                    pages: 280
                    startedAt: "2025-01-05"
                    deliveryAt: "2025-01-15"
                    corrector: "Sarah Martin"
                    pack: "Pack Intégral"
                    status: "completed"
                    progress: 100
                    rating: 4.8
                    canDownload: true
                meta:
                  page: 1
                  pageSize: 10
                  total: 42
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Paramètres invalides"
                message: "page doit être ≥ 1"
        '401':
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Authentification requise"
                message: "Utilisateur non authentifié"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Erreur interne du serveur"
                message: "Impossible de récupérer les projets"

  /projects/counts:
    get:
      summary: Get project status counts
      description: Retrieve count of projects grouped by status for the authenticated user
      tags:
        - Projects
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Project counts by status
          content:
            application/json:
              schema:
                type: object
                properties:
                  all:
                    type: integer
                    description: Total number of projects
                  active:
                    type: integer
                    description: Number of active projects (EN_COURS)
                  pending:
                    type: integer
                    description: Number of pending projects (EN_ATTENTE)
                  completed:
                    type: integer
                    description: Number of completed projects (TERMINE)
              example:
                all: 42
                active: 12
                pending: 5
                completed: 25
        '401':
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /files/projects/{id}/files:
    post:
      summary: Create project file and get S3 presigned URL
      description: Create a file record and return a presigned URL for direct S3 upload with authentication and ownership validation
      tags:
        - Project Files
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Project (commande) ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - size
                - mime
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 255
                  description: Original filename
                  example: "manuscript-final.pdf"
                size:
                  type: integer
                  minimum: 1
                  maximum: 20971520
                  description: File size in bytes (max 20MB)
                  example: 2048576
                mime:
                  type: string
                  description: MIME type of the file
                  enum:
                    - application/pdf
                    - application/msword
                    - application/vnd.openxmlformats-officedocument.wordprocessingml.document
                    - text/plain
                    - image/jpeg
                    - image/jpg
                    - image/png
                    - application/zip
                    - application/x-rar-compressed
                  example: "application/pdf"
      responses:
        '201':
          description: File created successfully with S3 upload details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadUrlResponse'
              example:
                uploadUrl: "https://my-bucket.s3.eu-west-3.amazonaws.com/"
                fields:
                  key: "project-abc123-1640995200-xyz789.pdf"
                  bucket: "my-bucket"
                  Content-Type: "application/pdf"
                  x-amz-meta-original-name: "manuscript-final.pdf"
                  x-amz-meta-user-id: "user-456"
                  x-amz-meta-project-id: "abc123"
                fileId: "file-789"
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Fichier trop volumineux"
                message: "La taille du fichier ne peut pas dépasser 20 Mo"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Access denied to project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Accès refusé"
                message: "Projet non trouvé ou accès non autorisé"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      summary: Get project files
      description: Retrieve all files for a project sorted by upload date descending
      tags:
        - Project Files
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Project (commande) ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of project files
          content:
            application/json:
              schema:
                type: object
                properties:
                  files:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProjectFile'
                  count:
                    type: integer
                    description: Total number of files
              example:
                files:
                  - id: "file-789"
                    filename: "manuscript-final.pdf"
                    mimeType: "application/pdf"
                    size: 2048576
                    url: "https://my-bucket.s3.eu-west-3.amazonaws.com/project-abc123-1640995200-xyz789.pdf"
                    type: "DOCUMENT"
                    commandeId: "abc123"
                    uploadedAt: "2023-12-01T10:30:00Z"
                count: 1
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Access denied to project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /files/projects/{id}/files/{fileId}:
    delete:
      summary: Delete project file
      description: Soft delete a project file with authentication and ownership validation
      tags:
        - Project Files
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Project (commande) ID
          schema:
            type: string
            format: uuid
        - name: fileId
          in: path
          required: true
          description: File ID to delete
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: File deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Fichier supprimé avec succès"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Access denied to file or project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /payment-methods:
    get:
      summary: Get user payment methods
      description: Retrieve payment methods for the authenticated user, sorted by creation date desc
      tags:
        - Payment Methods
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of payment methods
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentMethod'
              example:
                - id: "pm-123"
                  brand: "visa"
                  last4: "4242"
                  expMonth: 12
                  expYear: 2027
                  isDefault: true
                - id: "pm-456"
                  brand: "mastercard"
                  last4: "1234"
                  expMonth: 6
                  expYear: 2026
                  isDefault: false
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /payment-methods/{id}/default:
    put:
      summary: Set default payment method
      description: Set a payment method as default in Stripe (customer.invoice_settings.default_payment_method)
      tags:
        - Payment Methods
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Payment method ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Payment method set as default successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Moyen de paiement par défaut mis à jour"
        '400':
          description: Bad request - Invalid ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Payment method not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /payment-methods/{id}:
    delete:
      summary: Delete payment method
      description: Detach payment method from Stripe (stripe.paymentMethods.detach)
      tags:
        - Payment Methods
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Payment method ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Payment method deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Moyen de paiement supprimé"
        '400':
          description: Bad request - Invalid ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Payment method not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /stats/annual:
    get:
      summary: Get annual statistics
      description: Aggregate user spending (sum(amount)), corrected pages (sum(pages)), and orders (count(id)) for a given year
      tags:
        - Statistics
      security:
        - bearerAuth: []
      parameters:
        - name: year
          in: query
          required: true
          description: Year for statistics (YYYY format)
          schema:
            type: integer
            minimum: 2020
            maximum: 2030
          example: 2025
      responses:
        '200':
          description: Annual statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnualStats'
              example:
                totalSpent: 234800
                pagesCorrected: 1174
                orders: 5
        '400':
          description: Bad request - Invalid year format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Paramètres invalides"
                message: "Année invalide"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Project:
      type: object
      description: Detailed project information with all computed fields
      properties:
        id:
          type: string
          description: Unique identifier for the project
          example: "cmd-1-uuid"
        title:
          type: string
          description: Project title
          example: "L'Écho du Temps"
        type:
          type: string
          description: Project type (automatically determined from description)
          example: "Roman"
        pages:
          type: integer
          nullable: true
          description: Estimated number of pages
          example: 280
        startedAt:
          type: string
          format: date
          description: Project start date (YYYY-MM-DD)
          example: "2025-01-05"
        deliveryAt:
          type: string
          format: date
          nullable: true
          description: Planned delivery date (YYYY-MM-DD)
          example: "2025-01-15"
        corrector:
          type: string
          nullable: true
          description: Assigned corrector name
          example: "Sarah Martin"
        pack:
          type: string
          description: Service package (determined by amount)
          example: "Pack Intégral"
        status:
          type: string
          enum: [pending, active, completed, cancelled, suspended]
          description: Current project status
          example: "completed"
        progress:
          type: integer
          minimum: 0
          maximum: 100
          description: Project completion percentage
          example: 100
        rating:
          type: number
          minimum: 1
          maximum: 5
          nullable: true
          description: Project rating (only for completed projects)
          example: 4.8
        canDownload:
          type: boolean
          description: Whether the corrected document can be downloaded
          example: true
      required:
        - id
        - title
        - type
        - startedAt
        - pack
        - status
        - progress
        - canDownload

    PaginationMeta:
      type: object
      description: Pagination metadata
      properties:
        page:
          type: integer
          description: Current page number
          example: 1
        pageSize:
          type: integer
          description: Number of items per page
          example: 10
        total:
          type: integer
          description: Total number of items
          example: 42
      required:
        - page
        - pageSize
        - total

    PaymentMethod:
      type: object
      description: User payment method information
      properties:
        id:
          type: string
          format: uuid
          description: Payment method ID
          example: "pm-123"
        brand:
          type: string
          description: Card brand
          enum: [visa, mastercard, amex]
          example: "visa"
        last4:
          type: string
          description: Last 4 digits of the card
          pattern: "^[0-9]{4}$"
          example: "4242"
        expMonth:
          type: integer
          minimum: 1
          maximum: 12
          description: Expiration month
          example: 12
        expYear:
          type: integer
          minimum: 2024
          maximum: 2099
          description: Expiration year
          example: 2027
        isDefault:
          type: boolean
          description: Whether this is the default payment method
          example: true
      required:
        - id
        - brand
        - last4
        - expMonth
        - expYear
        - isDefault

    AnnualStats:
      type: object
      description: Annual user statistics
      properties:
        totalSpent:
          type: integer
          description: Total amount spent in centimes
          minimum: 0
          example: 234800
        pagesCorrected:
          type: integer
          description: Total number of pages corrected
          minimum: 0
          example: 1174
        orders:
          type: integer
          description: Total number of orders/projects
          minimum: 0
          example: 5
      required:
        - totalSpent
        - pagesCorrected
        - orders

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error type or category
        message:
          type: string
          description: Detailed error message
        details:
          type: array
          items:
            type: object
          description: Additional error details (for validation errors)
      required:
        - error
        - message

    ProjectFile:
      type: object
      description: Project file information with metadata
      properties:
        id:
          type: string
          format: uuid
          description: Unique file identifier
          example: "file-789"
        filename:
          type: string
          description: Original filename
          example: "manuscript-final.pdf"
        mimeType:
          type: string
          description: File MIME type
          example: "application/pdf"
        size:
          type: integer
          description: File size in bytes
          example: 2048576
        url:
          type: string
          format: uri
          description: File download URL (S3 or local)
          example: "https://my-bucket.s3.eu-west-3.amazonaws.com/project-abc123-1640995200-xyz789.pdf"
        type:
          type: string
          enum: [DOCUMENT, IMAGE, AUDIO, VIDEO, ARCHIVE, OTHER]
          description: File category
          example: "DOCUMENT"
        commandeId:
          type: string
          format: uuid
          description: Associated project ID
          example: "abc123"
        uploadedAt:
          type: string
          format: date-time
          description: Upload timestamp (ISO 8601)
          example: "2023-12-01T10:30:00Z"
      required:
        - id
        - filename
        - mimeType
        - size
        - url
        - type
        - commandeId
        - uploadedAt

    UploadUrlResponse:
      type: object
      description: S3 presigned URL response for file upload
      properties:
        uploadUrl:
          type: string
          format: uri
          description: S3 presigned upload URL
          example: "https://my-bucket.s3.eu-west-3.amazonaws.com/"
        fields:
          type: object
          description: Required form fields for S3 POST
          additionalProperties:
            type: string
          example:
            key: "project-abc123-1640995200-xyz789.pdf"
            bucket: "my-bucket"
            Content-Type: "application/pdf"
            x-amz-meta-original-name: "manuscript-final.pdf"
            x-amz-meta-user-id: "user-456"
            x-amz-meta-project-id: "abc123"
        fileId:
          type: string
          format: uuid
          description: Database file record ID
          example: "file-789"
      required:
        - uploadUrl
        - fields
        - fileId

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication