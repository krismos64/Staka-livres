/// <reference types="cypress" />

/**
 * Tests E2E - Workflows M√©tier End-to-End (Critique)
 * 
 * Tests complets des cycles de vie m√©tier de la plateforme Staka-Livres.
 * Couvre les workflows essentiels depuis la commande client jusqu'√† la livraison finale.
 * 
 * Workflows test√©s :
 * - Cycle complet correction : Commande ‚Üí Paiement ‚Üí Assignation ‚Üí Correction ‚Üí Livraison
 * - Workflow r√©vision : Client demande modifications ‚Üí Correcteur r√©pond ‚Üí Validation
 * - Processus escalade : Admin intervient ‚Üí R√©solution ‚Üí Notification
 * - Syst√®me de notation et feedback post-livraison
 */

describe("üîÑ Workflows M√©tier End-to-End - Tests Critiques", () => {
  const projectData = {
    client: {
      email: "client.test@example.com",
      password: "password123",
      prenom: "Marie",
      nom: "Dubois"
    },
    corrector: {
      email: "corrector.test@example.com",
      password: "password123",
      prenom: "Jean",
      nom: "Correcteur"
    },
    project: {
      title: "Roman Fantasy - Les Terres Oubli√©es",
      type: "Roman",
      pages: 250,
      pack: "integral",
      description: "Roman fantasy √©pique de 250 pages n√©cessitant une correction compl√®te",
      deadline: "2025-08-15"
    },
    payment: {
      amount: 500, // 250 pages √ó 2‚Ç¨
      currency: "EUR"
    }
  };

  beforeEach(() => {
    // R√©initialiser l'√©tat pour chaque test
    cy.resetDatabase();
    cy.visit("/");
    cy.wait(2000);
  });

  context("üìã Cycle Complet de Correction", () => {
    it("devrait ex√©cuter le workflow complet : Commande ‚Üí Paiement ‚Üí Assignation ‚Üí Correction ‚Üí Livraison", () => {
      // === √âTAPE 1 : CR√âATION DE COMMANDE CLIENT ===
      cy.task("log", "üîπ √âTAPE 1: Cr√©ation de commande client");
      
      cy.loginAsUser();
      cy.visit("/commander");
      cy.wait(2000);

      // Remplir les d√©tails du projet
      cy.get('[data-cy="project-title"]').type(projectData.project.title);
      cy.get('[data-cy="project-type"]').select(projectData.project.type);
      cy.get('[data-cy="project-pages"]').type(projectData.project.pages.toString());
      cy.get('[data-cy="project-pack"]').select(projectData.project.pack);
      cy.get('[data-cy="project-description"]').type(projectData.project.description);
      cy.get('[data-cy="project-deadline"]').type(projectData.project.deadline);

      // Upload du manuscrit
      cy.get('[data-cy="manuscript-upload"]')
        .selectFile("cypress/fixtures/manuscript-test.pdf", { force: true });

      cy.get('[data-cy="file-uploaded"]', { timeout: 15000 })
        .should("be.visible")
        .should("contain", "manuscript-test.pdf");

      // Valider la commande
      cy.get('[data-cy="validate-order"]').click();
      
      cy.get('[data-cy="order-summary"]', { timeout: 10000 })
        .should("be.visible")
        .should("contain", projectData.project.title)
        .should("contain", `${projectData.payment.amount}‚Ç¨`);

      cy.get('[data-cy="proceed-payment"]').click();

      // === √âTAPE 2 : PROCESSUS DE PAIEMENT ===
      cy.task("log", "üîπ √âTAPE 2: Processus de paiement Stripe");
      
      cy.url({ timeout: 15000 }).should("include", "/paiement");
      
      // V√©rifier les d√©tails de paiement
      cy.get('[data-cy="payment-amount"]')
        .should("contain", `${projectData.payment.amount}‚Ç¨`);

      // Simuler le paiement Stripe
      cy.simulateStripePayment();

      // V√©rifier la confirmation de paiement
      cy.get('[data-cy="payment-success"]', { timeout: 20000 })
        .should("be.visible")
        .should("contain", "Paiement r√©ussi");

      cy.get('[data-cy="order-confirmed"]')
        .should("contain", "Votre commande a √©t√© confirm√©e")
        .should("contain", projectData.project.title);

      // Sauvegarder l'ID du projet pour les √©tapes suivantes
      let projectId: string;
      cy.get('[data-cy="project-id"]')
        .invoke("text")
        .then((id) => {
          projectId = id.trim();
          cy.wrap(projectId).as("projectId");
        });

      // === √âTAPE 3 : ASSIGNATION CORRECTEUR (C√îT√â ADMIN) ===
      cy.task("log", "üîπ √âTAPE 3: Assignation correcteur par admin");
      
      cy.logout();
      cy.loginAsAdmin();
      cy.visit("/admin/projets");
      cy.wait(3000);

      // Trouver le nouveau projet
      cy.get('[data-cy="project-list"]')
        .should("contain", projectData.project.title)
        .should("contain", "En attente d'assignation");

      cy.get('[data-cy="project-list"]')
        .contains(projectData.project.title)
        .closest('[data-cy="project-row"]')
        .within(() => {
          cy.get('[data-cy="assign-corrector"]').click();
        });

      // S√©lectionner un correcteur disponible
      cy.get('[data-cy="corrector-modal"]', { timeout: 10000 }).should("be.visible");
      
      cy.get('[data-cy="available-correctors"]')
        .first()
        .click();

      cy.get('[data-cy="assign-deadline"]').type("2025-08-10");
      cy.get('[data-cy="assign-priority"]').select("NORMALE");
      cy.get('[data-cy="confirm-assignment"]').click();

      // V√©rifier l'assignation
      cy.get('[data-cy="assignment-success"]', { timeout: 15000 })
        .should("be.visible")
        .should("contain", "Correcteur assign√© avec succ√®s");

      cy.get('[data-cy="project-list"]')
        .contains(projectData.project.title)
        .closest('[data-cy="project-row"]')
        .should("contain", "En cours de correction");

      // === √âTAPE 4 : TRAVAIL DU CORRECTEUR ===
      cy.task("log", "üîπ √âTAPE 4: Travail du correcteur");
      
      cy.logout();
      cy.visit("/login");
      
      // Login en tant que correcteur
      cy.get('[data-cy="email"]').type(projectData.corrector.email);
      cy.get('[data-cy="password"]').type(projectData.corrector.password);
      cy.get('[data-cy="login-submit"]').click();
      cy.wait(3000);

      cy.visit("/correcteur/projets");
      cy.wait(2000);

      // V√©rifier que le projet est dans la liste du correcteur
      cy.get('[data-cy="assigned-projects"]')
        .should("contain", projectData.project.title)
        .should("contain", "√Ä corriger");

      // Ouvrir le projet pour correction
      cy.get('[data-cy="assigned-projects"]')
        .contains(projectData.project.title)
        .click();

      cy.get('[data-cy="correction-workspace"]', { timeout: 10000 })
        .should("be.visible");

      // T√©l√©charger le manuscrit original
      cy.get('[data-cy="download-original"]').click();
      cy.wait(2000);

      // Simuler le travail de correction
      cy.get('[data-cy="correction-notes"]')
        .type("Corrections effectu√©es :\n- Structure narrative am√©lior√©e\n- Coh√©rence des personnages v√©rifi√©e\n- Style et syntaxe corrig√©s\n- Orthographe et grammaire r√©vis√©es");

      // Upload du manuscrit corrig√©
      cy.get('[data-cy="corrected-upload"]')
        .selectFile("cypress/fixtures/manuscript-corrected.pdf", { force: true });

      cy.get('[data-cy="correction-file-uploaded"]', { timeout: 15000 })
        .should("be.visible");

      // Marquer la correction comme termin√©e
      cy.get('[data-cy="correction-progress"]').type("100");
      cy.get('[data-cy="mark-completed"]').click();

      cy.get('[data-cy="completion-modal"]', { timeout: 10000 }).should("be.visible");
      
      cy.get('[data-cy="completion-summary"]')
        .type("Correction compl√®te termin√©e. Toutes les incoh√©rences ont √©t√© corrig√©es, le style a √©t√© uniformis√©.");

      cy.get('[data-cy="submit-completion"]').click();

      // V√©rifier la soumission
      cy.get('[data-cy="correction-submitted"]', { timeout: 15000 })
        .should("be.visible")
        .should("contain", "Correction soumise avec succ√®s");

      // === √âTAPE 5 : VALIDATION ADMIN ET LIVRAISON ===
      cy.task("log", "üîπ √âTAPE 5: Validation admin et livraison");
      
      cy.logout();
      cy.loginAsAdmin();
      cy.visit("/admin/corrections-terminees");
      cy.wait(3000);

      // V√©rifier la correction soumise
      cy.get('[data-cy="completed-corrections"]')
        .should("contain", projectData.project.title)
        .should("contain", "√Ä valider");

      cy.get('[data-cy="completed-corrections"]')
        .contains(projectData.project.title)
        .closest('[data-cy="correction-row"]')
        .within(() => {
          cy.get('[data-cy="review-correction"]').click();
        });

      // Interface de validation
      cy.get('[data-cy="validation-workspace"]', { timeout: 10000 })
        .should("be.visible");

      // V√©rifier les fichiers
      cy.get('[data-cy="original-file"]')
        .should("contain", "manuscript-test.pdf");
      
      cy.get('[data-cy="corrected-file"]')
        .should("contain", "manuscript-corrected.pdf");

      // Valider la qualit√© de la correction
      cy.get('[data-cy="quality-score"]').select("Excellent");
      cy.get('[data-cy="admin-notes"]')
        .type("Correction de haute qualit√©. Pr√™t pour livraison au client.");

      cy.get('[data-cy="approve-correction"]').click();

      // Confirmer la livraison
      cy.get('[data-cy="delivery-modal"]', { timeout: 10000 }).should("be.visible");
      
      cy.get('[data-cy="delivery-method"]').select("email-and-platform");
      cy.get('[data-cy="delivery-message"]')
        .type("Bonjour, votre manuscrit corrig√© est pr√™t. Vous pouvez le t√©l√©charger depuis votre espace client.");

      cy.get('[data-cy="confirm-delivery"]').click();

      // V√©rifier la livraison
      cy.get('[data-cy="delivery-success"]', { timeout: 15000 })
        .should("be.visible")
        .should("contain", "Projet livr√© avec succ√®s");

      // === √âTAPE 6 : R√âCEPTION CLIENT ===
      cy.task("log", "üîπ √âTAPE 6: R√©ception c√¥t√© client");
      
      cy.logout();
      cy.loginAsUser();
      cy.visit("/mes-projets");
      cy.wait(3000);

      // V√©rifier que le projet est marqu√© comme livr√©
      cy.get('[data-cy="client-projects"]')
        .should("contain", projectData.project.title)
        .should("contain", "Livr√©");

      cy.get('[data-cy="client-projects"]')
        .contains(projectData.project.title)
        .closest('[data-cy="project-card"]')
        .within(() => {
          cy.get('[data-cy="download-corrected"]')
            .should("be.visible")
            .should("contain", "T√©l√©charger le manuscrit corrig√©");
          
          cy.get('[data-cy="view-corrections"]').click();
        });

      // Interface de visualisation des corrections
      cy.get('[data-cy="correction-details"]', { timeout: 10000 })
        .should("be.visible")
        .should("contain", "Corrections effectu√©es")
        .should("contain", "Structure narrative am√©lior√©e");

      // Test du t√©l√©chargement
      cy.get('[data-cy="download-corrected"]').click();
      cy.wait(2000);

      // V√©rifier qu'aucune erreur de t√©l√©chargement
      cy.get('[data-cy="download-error"]').should("not.exist");

      // === √âTAPE 7 : NOTATION ET FEEDBACK ===
      cy.task("log", "üîπ √âTAPE 7: Notation et feedback client");
      
      // Syst√®me de notation
      cy.get('[data-cy="rate-correction"]', { timeout: 10000 }).should("be.visible");
      
      cy.get('[data-cy="quality-rating"]')
        .find('[data-value="5"]')
        .click();

      cy.get('[data-cy="speed-rating"]')
        .find('[data-value="4"]')
        .click();

      cy.get('[data-cy="communication-rating"]')
        .find('[data-value="5"]')
        .click();

      cy.get('[data-cy="feedback-text"]')
        .type("Excellent travail ! La correction est tr√®s professionnelle et les am√©liorations apport√©es sont pertinentes. Je recommande vivement ce service.");

      cy.get('[data-cy="submit-feedback"]').click();

      // V√©rifier la soumission du feedback
      cy.get('[data-cy="feedback-success"]', { timeout: 15000 })
        .should("be.visible")
        .should("contain", "Merci pour votre retour");

      // === V√âRIFICATION FINALE DES M√âTRIQUES ===
      cy.task("log", "üîπ V√âRIFICATION: M√©triques et statistiques finales");
      
      cy.logout();
      cy.loginAsAdmin();
      cy.visit("/admin/dashboard");
      cy.wait(3000);

      // V√©rifier que les statistiques sont mises √† jour
      cy.get('[data-cy="completed-projects"]')
        .should("contain", "1"); // Au moins 1 projet termin√©

      cy.get('[data-cy="revenue-today"]')
        .should("contain", "500‚Ç¨"); // Revenus du jour

      cy.get('[data-cy="avg-rating"]')
        .should("contain", "4.7"); // Note moyenne mise √† jour

      // V√©rifier les m√©triques d√©taill√©es
      cy.visit("/admin/analytics");
      cy.wait(2000);

      cy.get('[data-cy="workflow-metrics"]')
        .should("contain", "Temps moyen de correction")
        .should("contain", "Taux de satisfaction")
        .should("contain", "D√©lais respect√©s");

      cy.task("log", "‚úÖ Workflow complet ex√©cut√© avec succ√®s!");
    });

    it("devrait g√©rer les d√©lais et alertes automatiques", () => {
      // Cr√©er un projet avec d√©lai court
      cy.loginAsUser();
      cy.visit("/commander");

      cy.get('[data-cy="project-title"]').type("Projet Urgence");
      cy.get('[data-cy="project-type"]').select("Nouvelle");
      cy.get('[data-cy="project-pages"]').type("50");
      cy.get('[data-cy="project-deadline"]').type("2025-07-26"); // Demain
      cy.get('[data-cy="urgency-level"]').select("URGENT");

      cy.get('[data-cy="manuscript-upload"]')
        .selectFile("cypress/fixtures/short-story.pdf", { force: true });

      cy.get('[data-cy="validate-order"]').click();
      cy.simulateStripePayment();
      cy.wait(5000);

      // V√©rifier les alertes c√¥t√© admin
      cy.logout();
      cy.loginAsAdmin();
      cy.visit("/admin/dashboard");

      cy.get('[data-cy="urgent-alerts"]', { timeout: 10000 })
        .should("be.visible")
        .should("contain", "1 projet urgent")
        .should("contain", "D√©lai: 1 jour");

      // V√©rifier les notifications automatiques
      cy.get('[data-cy="notification-bell"]').click();
      
      cy.get('[data-cy="notifications-panel"]')
        .should("contain", "Nouveau projet urgent")
        .should("contain", "Projet Urgence")
        .should("contain", "D√©lai tr√®s court");
    });

    it("devrait automatiser l'assignation bas√©e sur la charge de travail", () => {
      // Cr√©er plusieurs correcteurs avec diff√©rentes charges
      cy.loginAsAdmin();
      cy.visit("/admin/correcteurs");

      // V√©rifier les charges de travail actuelles
      cy.get('[data-cy="corrector-workload"]', { timeout: 10000 })
        .should("be.visible");

      // Cr√©er un nouveau projet
      cy.loginAsUser();
      cy.visit("/commander");

      cy.get('[data-cy="project-title"]').type("Auto-Assignation Test");
      cy.get('[data-cy="project-type"]').select("Roman");
      cy.get('[data-cy="project-pages"]').type("100");
      cy.get('[data-cy="auto-assign"]').check(); // Option d'assignation automatique

      cy.get('[data-cy="validate-order"]').click();
      cy.simulateStripePayment();
      cy.wait(5000);

      // V√©rifier l'assignation automatique
      cy.logout();
      cy.loginAsAdmin();
      cy.visit("/admin/projets");

      cy.get('[data-cy="project-list"]')
        .contains("Auto-Assignation Test")
        .closest('[data-cy="project-row"]')
        .should("contain", "Assign√© automatiquement")
        .should("contain", "En cours"); // Statut mis √† jour

      // V√©rifier l'algorithme d'assignation
      cy.get('[data-cy="assignment-details"]').click();
      
      cy.get('[data-cy="assignment-reason"]')
        .should("contain", "Charge de travail la plus faible")
        .should("contain", "Sp√©cialit√©: Roman");
    });
  });

  context("üîÑ Workflow de R√©vision", () => {
    it("devrait g√©rer les demandes de r√©vision client avec cycle complet", () => {
      // 1. Cr√©er et livrer un projet initial
      cy.createPaidProject("Projet √† R√©viser").then((projectId) => {
        // Simuler la livraison
        cy.loginAsAdmin();
        cy.request({
          method: "POST",
          url: `${Cypress.env("API_BASE_URL")}/admin/projects/${projectId}/deliver`,
          headers: {
            Authorization: `Bearer ${cy.window().its("localStorage").invoke("getItem", "auth_token")}`
          },
          body: {
            deliveryNotes: "Premi√®re livraison compl√®te",
            correctedFileUrl: "/files/corrected-v1.pdf"
          }
        });

        // 2. Client demande une r√©vision
        cy.loginAsUser();
        cy.visit("/mes-projets");

        cy.get('[data-cy="client-projects"]')
          .contains("Projet √† R√©viser")
          .closest('[data-cy="project-card"]')
          .within(() => {
            cy.get('[data-cy="request-revision"]').click();
          });

        cy.get('[data-cy="revision-modal"]', { timeout: 10000 }).should("be.visible");

        cy.get('[data-cy="revision-reason"]').select("modifications-style");
        cy.get('[data-cy="revision-details"]')
          .type("Bonjour, j'aimerais que vous modifiiez le ton du chapitre 3 pour le rendre plus dynamique. √âgalement, quelques dialogues semblent r√©p√©titifs.");

        cy.get('[data-cy="revision-urgency"]').select("normal");
        cy.get('[data-cy="submit-revision"]').click();

        // 3. V√©rifier la demande c√¥t√© admin
        cy.logout();
        cy.loginAsAdmin();
        cy.visit("/admin/revisions");

        cy.get('[data-cy="revision-requests"]', { timeout: 10000 })
          .should("contain", "Projet √† R√©viser")
          .should("contain", "modifications-style")
          .should("contain", "Normal");

        // 4. Assigner la r√©vision au correcteur original
        cy.get('[data-cy="revision-requests"]')
          .contains("Projet √† R√©viser")
          .closest('[data-cy="revision-row"]')
          .within(() => {
            cy.get('[data-cy="assign-revision"]').click();
          });

        cy.get('[data-cy="assign-to-original"]').click();
        cy.get('[data-cy="revision-deadline"]').type("2025-07-30");
        cy.get('[data-cy="confirm-revision-assignment"]').click();

        // 5. Correcteur traite la r√©vision
        cy.logout();
        cy.visit("/login");
        cy.get('[data-cy="email"]').type(projectData.corrector.email);
        cy.get('[data-cy="password"]').type(projectData.corrector.password);
        cy.get('[data-cy="login-submit"]').click();

        cy.visit("/correcteur/revisions");

        cy.get('[data-cy="revision-tasks"]', { timeout: 10000 })
          .should("contain", "Projet √† R√©viser")
          .should("contain", "modifications-style");

        cy.get('[data-cy="revision-tasks"]')
          .contains("Projet √† R√©viser")
          .click();

        // Interface de r√©vision
        cy.get('[data-cy="revision-workspace"]', { timeout: 10000 })
          .should("be.visible");

        cy.get('[data-cy="original-feedback"]')
          .should("contain", "chapitre 3")
          .should("contain", "dialogues r√©p√©titifs");

        // Effectuer les r√©visions
        cy.get('[data-cy="revision-notes"]')
          .type("R√©visions effectu√©es :\n- Chapitre 3 : ton rendu plus dynamique avec phrases plus courtes\n- Dialogues r√©p√©titifs supprim√©s et vari√©s\n- Ajout de quelques expressions pour enrichir le style");

        cy.get('[data-cy="revised-upload"]')
          .selectFile("cypress/fixtures/manuscript-revised.pdf", { force: true });

        cy.get('[data-cy="submit-revision"]').click();

        // 6. Validation et livraison de la r√©vision
        cy.logout();
        cy.loginAsAdmin();
        cy.visit("/admin/revisions");

        cy.get('[data-cy="completed-revisions"]')
          .contains("Projet √† R√©viser")
          .closest('[data-cy="revision-row"]')
          .within(() => {
            cy.get('[data-cy="validate-revision"]').click();
          });

        cy.get('[data-cy="approve-revision"]').click();
        cy.get('[data-cy="deliver-revision"]').click();

        // 7. V√©rification c√¥t√© client
        cy.logout();
        cy.loginAsUser();
        cy.visit("/mes-projets");

        cy.get('[data-cy="client-projects"]')
          .contains("Projet √† R√©viser")
          .closest('[data-cy="project-card"]')
          .should("contain", "R√©vision livr√©e")
          .within(() => {
            cy.get('[data-cy="download-revision"]').should("be.visible");
            cy.get('[data-cy="view-revision-notes"]').click();
          });

        cy.get('[data-cy="revision-details"]', { timeout: 10000 })
          .should("contain", "Chapitre 3 : ton rendu plus dynamique")
          .should("contain", "Dialogues r√©p√©titifs supprim√©s");
      });
    });

    it("devrait limiter le nombre de r√©visions gratuites", () => {
      cy.createPaidProject("Projet Multi-R√©visions").then((projectId) => {
        // Simuler plusieurs demandes de r√©vision
        for (let i = 1; i <= 4; i++) {
          cy.loginAsUser();
          cy.visit("/mes-projets");

          cy.get('[data-cy="client-projects"]')
            .contains("Projet Multi-R√©visions")
            .closest('[data-cy="project-card"]')
            .within(() => {
              cy.get('[data-cy="request-revision"]').click();
            });

          if (i <= 2) {
            // R√©visions gratuites (1-2)
            cy.get('[data-cy="revision-cost"]')
              .should("contain", "Gratuit");
            
            cy.get('[data-cy="revision-details"]')
              .type(`R√©vision gratuite ${i}`);
            
            cy.get('[data-cy="submit-revision"]').click();
            
            cy.get('[data-cy="revision-submitted"]', { timeout: 10000 })
              .should("be.visible");

          } else {
            // R√©visions payantes (3+)
            cy.get('[data-cy="revision-cost"]')
              .should("contain", "50‚Ç¨")
              .should("contain", "R√©vision payante");

            if (i === 4) {
              // Quatri√®me r√©vision - refuser le paiement
              cy.get('[data-cy="cancel-revision"]').click();
              
              cy.get('[data-cy="revision-cancelled"]')
                .should("be.visible")
                .should("contain", "R√©vision annul√©e");

            } else {
              // Troisi√®me r√©vision - accepter le paiement
              cy.get('[data-cy="revision-details"]')
                .type(`R√©vision payante ${i}`);
              
              cy.get('[data-cy="proceed-payment"]').click();
              cy.simulateStripePayment();
              
              cy.get('[data-cy="revision-paid"]', { timeout: 15000 })
                .should("be.visible");
            }
          }

          cy.wait(2000);
        }

        // V√©rifier les m√©triques des r√©visions
        cy.loginAsAdmin();
        cy.visit(`/admin/projects/${projectId}/revisions`);

        cy.get('[data-cy="revision-history"]', { timeout: 10000 })
          .should("contain", "2 r√©visions gratuites")
          .should("contain", "1 r√©vision payante")
          .should("contain", "1 r√©vision annul√©e");
      });
    });
  });

  context("üö® Processus d'Escalade", () => {
    it("devrait d√©clencher l'escalade automatique pour projets en retard", () => {
      // Cr√©er un projet avec d√©lai d√©pass√©
      cy.loginAsAdmin();
      cy.visit("/admin/projets");

      // Simuler un projet en retard via API
      cy.request({
        method: "POST",
        url: `${Cypress.env("API_BASE_URL")}/dev/create-overdue-project`,
        body: {
          title: "Projet en Retard",
          daysOverdue: 3,
          correctorId: "corrector_123"
        }
      });

      cy.reload();
      cy.wait(3000);

      // V√©rifier l'escalade automatique
      cy.get('[data-cy="escalated-projects"]', { timeout: 10000 })
        .should("be.visible")
        .should("contain", "Projet en Retard")
        .should("contain", "3 jours de retard")
        .should("contain", "Escalade automatique");

      // V√©rifier les notifications d'escalade
      cy.get('[data-cy="escalation-alerts"]')
        .should("contain", "1 projet escalad√©")
        .should("contain", "Action requise");

      // Actions d'escalade disponibles
      cy.get('[data-cy="escalated-projects"]')
        .contains("Projet en Retard")
        .closest('[data-cy="escalation-row"]')
        .within(() => {
          cy.get('[data-cy="escalation-options"]').should("be.visible");
          cy.get('[data-cy="reassign-corrector"]').should("be.visible");
          cy.get('[data-cy="extend-deadline"]').should("be.visible");
          cy.get('[data-cy="contact-client"]').should("be.visible");
        });
    });

    it("devrait permettre la r√©assignation urgente avec compensation", () => {
      // Cr√©er un projet probl√©matique
      cy.createPaidProject("Projet Probl√©matique").then((projectId) => {
        // Signaler un probl√®me
        cy.loginAsAdmin();
        cy.visit(`/admin/projects/${projectId}`);

        cy.get('[data-cy="report-issue"]').click();
        cy.get('[data-cy="issue-type"]').select("corrector-unavailable");
        cy.get('[data-cy="issue-severity"]').select("urgent");
        cy.get('[data-cy="issue-description"]')
          .type("Le correcteur est indisponible pour raisons m√©dicales. R√©assignation urgente n√©cessaire.");

        cy.get('[data-cy="submit-issue"]').click();

        // Interface de r√©assignation urgente
        cy.get('[data-cy="urgent-reassignment"]', { timeout: 10000 })
          .should("be.visible");

        // Trouver un correcteur de remplacement
        cy.get('[data-cy="find-replacement"]').click();

        cy.get('[data-cy="available-correctors"]')
          .should("be.visible")
          .first()
          .within(() => {
            cy.get('[data-cy="corrector-availability"]')
              .should("contain", "Disponible");
            
            cy.get('[data-cy="select-corrector"]').click();
          });

        // Configuration de la compensation
        cy.get('[data-cy="compensation-modal"]', { timeout: 10000 })
          .should("be.visible");

        cy.get('[data-cy="original-corrector-compensation"]')
          .should("contain", "50%"); // Compensation partielle

        cy.get('[data-cy="replacement-corrector-bonus"]')
          .type("20"); // Bonus de 20% pour urgence

        cy.get('[data-cy="client-discount"]')
          .type("10"); // R√©duction de 10% pour le client

        cy.get('[data-cy="confirm-reassignment"]').click();

        // V√©rifications
        cy.get('[data-cy="reassignment-success"]', { timeout: 15000 })
          .should("be.visible")
          .should("contain", "Projet r√©assign√© avec succ√®s");

        // V√©rifier les notifications automatiques
        cy.get('[data-cy="notifications-sent"]')
          .should("contain", "Client notifi√©")
          .should("contain", "Correcteur original notifi√©")
          .should("contain", "Nouveau correcteur notifi√©");

        // V√©rifier le nouveau d√©lai
        cy.get('[data-cy="updated-deadline"]')
          .should("be.visible")
          .should("contain", "D√©lai ajust√© automatiquement");
      });
    });

    it("devrait g√©rer les litiges client avec processus de m√©diation", () => {
      cy.createPaidProject("Projet en Litige").then((projectId) => {
        // Simuler une livraison
        cy.loginAsAdmin();
        cy.request({
          method: "POST",
          url: `${Cypress.env("API_BASE_URL")}/admin/projects/${projectId}/deliver`,
          body: { deliveryNotes: "Livraison initiale" }
        });

        // Client ouvre un litige
        cy.loginAsUser();
        cy.visit("/mes-projets");

        cy.get('[data-cy="client-projects"]')
          .contains("Projet en Litige")
          .closest('[data-cy="project-card"]')
          .within(() => {
            cy.get('[data-cy="open-dispute"]').click();
          });

        cy.get('[data-cy="dispute-modal"]', { timeout: 10000 }).should("be.visible");

        cy.get('[data-cy="dispute-reason"]').select("quality-issues");
        cy.get('[data-cy="dispute-severity"]').select("major");
        cy.get('[data-cy="dispute-description"]')
          .type("La correction n'a pas respect√© les consignes initiales. Plusieurs erreurs subsistent et le style demand√© n'a pas √©t√© appliqu√©.");

        // Joindre des preuves
        cy.get('[data-cy="dispute-evidence"]')
          .selectFile("cypress/fixtures/dispute-evidence.pdf", { force: true });

        cy.get('[data-cy="requested-resolution"]').select("full-revision");
        cy.get('[data-cy="submit-dispute"]').click();

        // Processus de m√©diation c√¥t√© admin
        cy.logout();
        cy.loginAsAdmin();
        cy.visit("/admin/litiges");

        cy.get('[data-cy="active-disputes"]', { timeout: 10000 })
          .should("contain", "Projet en Litige")
          .should("contain", "quality-issues")
          .should("contain", "Majeur");

        cy.get('[data-cy="active-disputes"]')
          .contains("Projet en Litige")
          .closest('[data-cy="dispute-row"]')
          .within(() => {
            cy.get('[data-cy="mediate-dispute"]').click();
          });

        // Interface de m√©diation
        cy.get('[data-cy="mediation-workspace"]', { timeout: 10000 })
          .should("be.visible");

        // Examiner les preuves
        cy.get('[data-cy="client-evidence"]')
          .should("contain", "dispute-evidence.pdf");

        cy.get('[data-cy="original-requirements"]')
          .should("be.visible");

        // Contacter le correcteur pour explications
        cy.get('[data-cy="request-corrector-response"]').click();

        cy.get('[data-cy="corrector-message"]')
          .type("Pouvez-vous nous expliquer votre approche de correction et r√©pondre aux points soulev√©s par le client ?");

        cy.get('[data-cy="send-to-corrector"]').click();

        // Proposer une r√©solution
        cy.get('[data-cy="propose-resolution"]').click();

        cy.get('[data-cy="resolution-type"]').select("partial-revision");
        cy.get('[data-cy="resolution-details"]')
          .type("Nous proposons une r√©vision cibl√©e des points soulev√©s par le client, sans frais suppl√©mentaires. D√©lai: 5 jours ouvr√©s.");

        cy.get('[data-cy="corrector-compensation"]').type("75"); // 75% du tarif original
        cy.get('[data-cy="client-discount"]').type("0"); // Pas de r√©duction

        cy.get('[data-cy="submit-resolution"]').click();

        // V√©rifier les notifications
        cy.get('[data-cy="resolution-sent"]', { timeout: 15000 })
          .should("be.visible")
          .should("contain", "R√©solution propos√©e aux deux parties");

        // Simuler l'acceptation c√¥t√© client
        cy.logout();
        cy.loginAsUser();
        cy.visit("/mes-projets");

        cy.get('[data-cy="pending-resolutions"]', { timeout: 10000 })
          .should("be.visible")
          .should("contain", "R√©solution propos√©e");

        cy.get('[data-cy="accept-resolution"]').click();

        cy.get('[data-cy="resolution-accepted"]', { timeout: 10000 })
          .should("be.visible")
          .should("contain", "R√©solution accept√©e");
      });
    });
  });

  afterEach(() => {
    // Nettoyage apr√®s chaque test
    cy.window().then((win) => {
      win.localStorage.clear();
      win.sessionStorage.clear();
    });
  });
});