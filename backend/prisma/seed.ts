import {
  FileType,
  InvoiceStatus,
  MessageStatut,
  MessageType,
  NotificationPriority,
  NotificationType,
  PageStatus,
  PageType,
  Priorite,
  PrismaClient,
  Role,
  StatutCommande,
  SupportCategory,
  SupportPriority,
  SupportRequestStatus,
} from "@prisma/client";
import bcrypt from "bcryptjs";

const prisma = new PrismaClient();

async function main() {
  // 1. Hash des mots de passe
  const adminPassword = await bcrypt.hash("admin123", 12);
  const userPassword = await bcrypt.hash("user123", 12);

  // 2. Cr√©ation des utilisateurs (ADMIN + CLIENT)
  const admin = await prisma.user.upsert({
    where: { email: "admin@staka-editions.com" },
    update: {},
    create: {
      prenom: "Admin",
      nom: "Staka",
      email: "admin@staka-editions.com",
      password: adminPassword,
      role: Role.ADMIN,
      isActive: true,
    },
  });

  const user = await prisma.user.upsert({
    where: { email: "user@example.com" },
    update: {},
    create: {
      prenom: "Jean",
      nom: "Dupont",
      email: "user@example.com",
      password: userPassword,
      role: Role.USER,
      isActive: true,
    },
  });

  // 2.5. Cr√©ation d'utilisateurs suppl√©mentaires pour tests
  const user2 = await prisma.user.upsert({
    where: { email: "marie.martin@example.com" },
    update: {},
    create: {
      prenom: "Marie",
      nom: "Martin",
      email: "marie.martin@example.com",
      password: userPassword,
      role: Role.USER,
      isActive: true,
    },
  });

  const user3 = await prisma.user.upsert({
    where: { email: "pierre.durand@example.com" },
    update: {},
    create: {
      prenom: "Pierre",
      nom: "Durand",
      email: "pierre.durand@example.com",
      password: userPassword,
      role: Role.USER,
      isActive: true,
    },
  });

  console.log("‚úÖ Utilisateurs cr√©√©s/mise √† jour:");
  console.log(`- Admin: ${admin.email} (${admin.id})`);
  console.log(`- User1: ${user.email} (${user.id})`);
  console.log(`- User2: ${user2.email} (${user2.id})`);
  console.log(`- User3: ${user3.email} (${user3.id})`);

  // Purge des tables pour un seed propre
  await prisma.commande.deleteMany({});
  await prisma.file.deleteMany({});
  await prisma.message.deleteMany({});
  await prisma.notification.deleteMany({});
  await prisma.paymentMethod.deleteMany({});
  await prisma.invoice.deleteMany({});
  await prisma.supportRequest.deleteMany({});
  await prisma.fAQ.deleteMany({});
  console.log("‚úÖ Anciennes donn√©es purg√©es.");

  // 3. Cr√©ation de commandes vari√©es pour tous les statuts
  const commandesData = [
    // Commande 1 - EN_ATTENTE
    {
      userId: user.id,
      titre: "Correction manuscrit - Roman",
      description:
        "Correction orthographique et grammaticale d'un roman de 300 pages.",
      statut: StatutCommande.EN_ATTENTE,
      priorite: Priorite.NORMALE,
      amount: 4999,
    },
    // Commande 2 - EN_COURS
    {
      userId: admin.id,
      titre: "Mise en page livre",
      description: "Mise en page professionnelle d'un recueil de po√©sies.",
      statut: StatutCommande.EN_COURS,
      priorite: Priorite.URGENTE,
      amount: 12000,
    },
    // Commande 3 - TERMINE
    {
      userId: user2.id,
      titre: "Correction essai philosophique",
      description: "Correction compl√®te d'un essai de 150 pages.",
      statut: StatutCommande.TERMINE,
      priorite: Priorite.NORMALE,
      amount: 3500,
      createdAt: new Date("2024-01-15"),
    },
    // Commande 4 - ANNULEE
    {
      userId: user2.id,
      titre: "Projet annul√©",
      description: "Commande annul√©e par le client.",
      statut: StatutCommande.ANNULEE,
      priorite: Priorite.FAIBLE,
      amount: 2000,
      createdAt: new Date("2024-02-01"),
    },
    // Commande 5 - SUSPENDUE
    {
      userId: user3.id,
      titre: "Correction biographie - En attente infos",
      description:
        "Correction suspendue en attente d'informations compl√©mentaires du client.",
      statut: StatutCommande.SUSPENDUE,
      priorite: Priorite.NORMALE,
      amount: 6500,
      createdAt: new Date("2024-02-15"),
    },
    // Commande 6 - EN_ATTENTE (r√©cente)
    {
      userId: user3.id,
      titre: "Relecture manuscrit thriller",
      description: "Relecture approfondie d'un thriller de 250 pages.",
      statut: StatutCommande.EN_ATTENTE,
      priorite: Priorite.HAUTE,
      amount: 4200,
    },
  ];

  await prisma.commande.createMany({
    data: commandesData,
  });

  const commandes = await prisma.commande.findMany();
  const commande1 = commandes.find((c) => c.titre.includes("Roman"));
  const commande2 = commandes.find((c) => c.titre.includes("Mise en page"));
  if (!commande1 || !commande2) {
    console.error("Erreur: Commandes de base non trouv√©es apr√®s cr√©ation.");
    return;
  }

  console.log("‚úÖ Commandes cr√©√©es:");
  commandes.forEach((cmd, index) => {
    console.log(
      `- Commande ${index + 1}: ${cmd.titre} (${cmd.statut}) - User: ${
        cmd.userId
      }`
    );
  });

  // 4. Cr√©ation de fichiers attach√©s √† certaines commandes
  const fileUser = await prisma.file.create({
    data: {
      filename: "manuscrit_roman.pdf",
      storedName: "client_1234.pdf",
      mimeType: "application/pdf",
      size: 152500,
      url: "https://exemple.staka.fr/fake.pdf",
      type: FileType.DOCUMENT,
      uploadedById: user.id,
      commandeId: commande1.id,
    },
  });

  const fileAdmin = await prisma.file.create({
    data: {
      filename: "recueil_poesies.docx",
      storedName: "admin_5678.docx",
      mimeType:
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
      size: 225000,
      url: "https://exemple.staka.fr/fake_admin.docx",
      type: FileType.DOCUMENT,
      uploadedById: admin.id,
      commandeId: commande2.id,
    },
  });

  // 5. Cr√©ation d'un message li√© √† la commande
  const message = await prisma.message.create({
    data: {
      senderId: admin.id,
      receiverId: user.id,
      commandeId: commande1.id,
      subject: "Bienvenue sur Staka Livres !",
      content: "Ceci est votre premi√®re conversation.",
      type: MessageType.USER_MESSAGE,
      statut: MessageStatut.ENVOYE,
      isRead: false,
      isArchived: false,
      attachments: {
        create: [{ fileId: fileUser.id }],
      },
    },
  });

  // 6. Notification pour l'utilisateur
  await prisma.notification.create({
    data: {
      userId: user.id,
      title: "Nouveau message re√ßu",
      message: "Vous avez un nouveau message de l'√©quipe Staka.",
      type: NotificationType.MESSAGE,
      priority: NotificationPriority.NORMALE,
      isRead: false,
      isDeleted: false,
    },
  });

  // 7. M√©thode de paiement fictive
  await prisma.paymentMethod.create({
    data: {
      userId: user.id,
      stripePaymentMethodId: "pm_fake_1234",
      brand: "visa",
      last4: "4242",
      expMonth: 12,
      expYear: 2029,
      isDefault: true,
      isActive: true,
      fingerprint: "fp_fake",
    },
  });

  // 8. Ticket support + message support
  const support = await prisma.supportRequest.create({
    data: {
      userId: user.id,
      title: "Probl√®me de connexion",
      description: "Je n'arrive pas √† acc√©der √† mon espace.",
      category: SupportCategory.TECHNIQUE,
      priority: SupportPriority.NORMALE,
      status: SupportRequestStatus.OUVERT,
      assignedToId: admin.id,
      createdAt: new Date(),
    },
  });

  await prisma.message.create({
    data: {
      senderId: admin.id,
      receiverId: user.id,
      supportRequestId: support.id,
      subject: "Votre demande de support",
      content: "Nous traitons votre demande de support au plus vite.",
      type: MessageType.SUPPORT_MESSAGE,
      statut: MessageStatut.ENVOYE,
      isRead: false,
    },
  });

  // 9. Cr√©ation d'une facture r√©elle pour une commande pay√©e
  console.log("üìã Cr√©ation d'une facture r√©elle...");

  // R√©cup√©ration de l'utilisateur client (adaptation du code original)
  const clientUser = await prisma.user.findUnique({
    where: { email: "marie.martin@example.com" },
  });

  if (!clientUser) {
    throw new Error("Client non trouv√©");
  }

  // R√©cup√©ration de la commande termin√©e (√©quivalent d'une commande pay√©e)
  const paidOrder = await prisma.commande.findFirst({
    where: {
      userId: clientUser.id,
      statut: StatutCommande.TERMINE,
      amount: { not: null },
    },
  });

  if (!paidOrder) {
    throw new Error("Commande pay√©e non trouv√©e");
  }

  // Cr√©ation de la facture r√©elle
  const invoice = await prisma.invoice.create({
    data: {
      commandeId: paidOrder.id,
      number: "INV-2025-0001",
      amount: paidOrder.amount!, // 3500 centimes = 35.00‚Ç¨
      taxAmount: Math.round(paidOrder.amount! * 0.2), // TVA 20%
      status: InvoiceStatus.PAID,
      pdfUrl:
        "https://staka-s3-bucket.s3.eu-west-3.amazonaws.com/invoices/INV-2025-0001.pdf",
      issuedAt: new Date("2025-06-30T10:00:00Z"),
      dueAt: new Date("2025-07-15T23:59:59Z"),
      paidAt: new Date("2025-06-30T14:30:00Z"),
    },
  });

  console.log("‚úÖ Seed invoice INV-2025-0001 created");
  console.log(
    `üìã Facture cr√©√©e: ${invoice.number} pour ${(invoice.amount / 100).toFixed(
      2
    )}‚Ç¨`
  );
  console.log(
    `üë§ Client: ${clientUser.prenom} ${clientUser.nom} (${clientUser.email})`
  );
  console.log(`üì¶ Commande: ${paidOrder.titre}`);

  // 10. Cr√©ation des FAQ de d√©monstration
  console.log("‚ùì Cr√©ation des FAQ de d√©monstration...");

  const faqData = [
    {
      question: "Quels types de manuscrits acceptez-vous ?",
      answer:
        "Nous travaillons avec tous les genres litt√©raires : romans, nouvelles, essais, biographies, m√©moires, po√©sie, guides pratiques, etc. Nous acceptons les fichiers Word (.doc, .docx) et PDF dans toutes les langues avec caract√®res latins.",
      details: null,
      categorie: "G√©n√©ral",
      ordre: 1,
      visible: true,
    },
    {
      question: "Quels sont vos d√©lais de livraison ?",
      answer:
        "Le d√©lai moyen est de 7 √† 15 jours selon la longueur du manuscrit et le pack choisi. Pour le Pack Int√©gral, comptez 15 jours pour un manuscrit de 200 pages. Une estimation pr√©cise vous est donn√©e d√®s r√©ception de votre fichier.",
      details:
        "D√©lais par service : Correction seule : 7-10 jours ‚Ä¢ Design + mise en page : 5-7 jours ‚Ä¢ Pack complet : 10-15 jours ‚Ä¢ Urgence (48h) : +50% du tarif",
      categorie: "D√©lais",
      ordre: 2,
      visible: true,
    },
    {
      question: "Comment fonctionne la tarification du Pack Int√©gral ?",
      answer:
        "Le Pack Int√©gral suit notre tarification d√©gressive : 10 premi√®res pages gratuites, puis 2‚Ç¨ par page jusqu'√† 300 pages, et 1‚Ç¨ par page au-del√†. Si votre livre fait 150 pages, le total sera de 280‚Ç¨ (10 gratuites + 140 √ó 2‚Ç¨).",
      details:
        "Exemple concret : 100 pages : 180‚Ç¨ (90 pages payantes) ‚Ä¢ 200 pages : 380‚Ç¨ (190 pages payantes) ‚Ä¢ 400 pages : 780‚Ç¨ (290 + 100 pages payantes)",
      categorie: "Tarifs",
      ordre: 3,
      visible: true,
    },
    {
      question: "Puis-je demander des modifications apr√®s livraison ?",
      answer:
        "Oui, absolument ! Nous offrons des modifications illimit√©es jusqu'√† votre enti√®re satisfaction. C'est notre garantie \"Satisfait ou corrig√©\". Vous pouvez demander autant de retouches que n√©cessaire sans frais suppl√©mentaires.",
      details: null,
      categorie: "Correction",
      ordre: 4,
      visible: true,
    },
    {
      question: "Mes donn√©es sont-elles prot√©g√©es ?",
      answer:
        "Vos manuscrits et donn√©es personnelles sont prot√©g√©s selon le RGPD. Nous signons un accord de confidentialit√© et ne partageons jamais vos contenus. Vos fichiers sont stock√©s de mani√®re s√©curis√©e et supprim√©s apr√®s le projet.",
      details: null,
      categorie: "G√©n√©ral",
      ordre: 5,
      visible: true,
    },
    {
      question: "Puis-je parler √† un conseiller avant de commander ?",
      answer:
        "Bien s√ªr ! Contactez-nous via le formulaire, par email ou WhatsApp pour organiser un √©change t√©l√©phonique gratuit avec un membre de notre √©quipe √©ditoriale. Nous r√©pondons √† toutes vos questions et vous conseillons le pack le plus adapt√©.",
      details: null,
      categorie: "G√©n√©ral",
      ordre: 6,
      visible: true,
    },
    {
      question: "Quelle est la diff√©rence entre correction et relecture ?",
      answer:
        "La correction traite l'orthographe, la grammaire, la conjugaison et la syntaxe. La relecture va plus loin avec l'am√©lioration du style, de la coh√©rence narrative et de la fluidit√©. Notre Pack Int√©gral combine les deux pour un r√©sultat optimal.",
      details: null,
      categorie: "Correction",
      ordre: 7,
      visible: true,
    },
    {
      question: "FAQ cach√©e pour tests admin",
      answer:
        "Cette FAQ n'est pas visible publiquement et sert uniquement aux tests administrateurs.",
      details: null,
      categorie: "Test",
      ordre: 8,
      visible: false,
    },
  ];

  for (const faq of faqData) {
    await prisma.fAQ.create({
      data: faq,
    });
  }

  console.log(
    `‚úÖ ${faqData.length} FAQ cr√©√©es (${
      faqData.filter((f) => f.visible).length
    } visibles, ${faqData.filter((f) => !f.visible).length} cach√©es)`
  );

  console.log(
    "üå± Seed complet ! 6 commandes avec statuts vari√©s cr√©√©es pour tests."
  );
  console.log("üìä R√©partition des statuts:");
  console.log("- EN_ATTENTE: 2 commandes");
  console.log("- EN_COURS: 1 commande");
  console.log("- TERMINE: 1 commande");
  console.log("- ANNULEE: 1 commande");
  console.log("- SUSPENDUE: 1 commande");
  console.log("üí∞ 1 facture r√©elle cr√©√©e et pay√©e");

  // 11. Seed des tarifs de test (fusion seed-tarifs.ts)
  console.log("üå± Ajout des tarifs de test...");

  const tarifsDeTest = [
    {
      nom: "Correction Standard",
      description:
        "Correction orthographique, grammaticale et typographique de votre manuscrit",
      prix: 200,
      prixFormate: "2‚Ç¨",
      typeService: "Correction",
      dureeEstimee: "7-10 jours",
      actif: true,
      ordre: 1,
    },
    {
      nom: "Correction Express",
      description: "Correction rapide en 3-5 jours pour les manuscrits urgents",
      prix: 300,
      prixFormate: "3‚Ç¨",
      typeService: "Correction",
      dureeEstimee: "3-5 jours",
      actif: true,
      ordre: 2,
    },
    {
      nom: "Pack KDP Auto√©dition",
      description:
        "Maquette int√©rieure + couverture + formats ePub/Mobi pour Amazon KDP",
      prix: 35000,
      prixFormate: "350‚Ç¨",
      typeService: "Mise en forme",
      dureeEstimee: "5-7 jours",
      actif: true,
      ordre: 3,
    },
    {
      nom: "Relecture Avanc√©e",
      description:
        "Relecture approfondie avec suggestions stylistiques et structurelles",
      prix: 250,
      prixFormate: "2,50‚Ç¨",
      typeService: "Relecture",
      dureeEstimee: "10-12 jours",
      actif: true,
      ordre: 4,
    },
    {
      nom: "Pack R√©daction Compl√®te",
      description:
        "Coaching r√©dactionnel + correction + mise en forme + couverture",
      prix: 145000,
      prixFormate: "1450‚Ç¨",
      typeService: "R√©daction",
      dureeEstimee: "3-6 semaines",
      actif: true,
      ordre: 5,
    },
    {
      nom: "Traduction Fran√ßais-Anglais",
      description:
        "Traduction professionnelle de votre manuscrit vers l'anglais",
      prix: 120,
      prixFormate: "1,20‚Ç¨",
      typeService: "Traduction",
      dureeEstimee: "2-3 semaines",
      actif: false,
      ordre: 6,
    },
  ];

  // Suppression des tarifs existants
  const existingTarifs = await prisma.tarif.count();
  if (existingTarifs > 0) {
    console.log(`‚ö†Ô∏è  ${existingTarifs} tarifs existent d√©j√†. Suppression...`);
    await prisma.tarif.deleteMany();
  }

  // Ajout des nouveaux tarifs
  for (const tarifData of tarifsDeTest) {
    const tarif = await prisma.tarif.create({
      data: tarifData,
    });
    console.log(`‚úÖ Tarif cr√©√©: ${tarif.nom} (${tarif.prixFormate})`);
  }
  console.log(`üéâ ${tarifsDeTest.length} tarifs ajout√©s avec succ√®s !`);

  // 12. Seed des pages l√©gales (fixes, non supprimables)
  // Purge la table Page avant de reseeder les pages l√©gales
  await prisma.page.deleteMany({});

  const legalPages = [
    {
      slug: "mentions-legales",
      title: "Mentions l√©gales",
      content: "<p>Mentions l√©gales √† compl√©ter...</p>",
      metaTitle: "Mentions l√©gales",
      metaDescription: "Mentions l√©gales du site Staka.",
      type: PageType.PAGE,
      status: PageStatus.PUBLISHED,
      isPublic: true,
      sortOrder: 1,
    },
    {
      slug: "politique-confidentialite",
      title: "Politique de confidentialit√©",
      content: "<p>Politique de confidentialit√© √† compl√©ter...</p>",
      metaTitle: "Politique de confidentialit√©",
      metaDescription: "Politique de confidentialit√© du site Staka.",
      type: PageType.PAGE,
      status: PageStatus.PUBLISHED,
      isPublic: true,
      sortOrder: 2,
    },
    {
      slug: "cgv",
      title: "Conditions G√©n√©rales de Vente",
      content: "<p>CGV √† compl√©ter...</p>",
      metaTitle: "CGV",
      metaDescription: "Conditions G√©n√©rales de Vente du site Staka.",
      type: PageType.PAGE,
      status: PageStatus.PUBLISHED,
      isPublic: true,
      sortOrder: 3,
    },
    {
      slug: "rgpd",
      title: "RGPD",
      content: "<p>RGPD √† compl√©ter...</p>",
      metaTitle: "RGPD",
      metaDescription: "Informations RGPD du site Staka.",
      type: PageType.PAGE,
      status: PageStatus.PUBLISHED,
      isPublic: true,
      sortOrder: 4,
    },
  ];

  for (const page of legalPages) {
    await prisma.page.upsert({
      where: { slug: page.slug },
      update: page,
      create: page,
    });
    console.log(`‚úÖ Page l√©gale seed√©e : ${page.title}`);
  }
}

main()
  .then(async () => {
    await prisma.$disconnect();
  })
  .catch(async (e) => {
    console.error("‚ùå Seed failed:", e);
    await prisma.$disconnect();
    process.exit(1);
  });
