import { PrismaClient, Role } from "@prisma/client";
import bcrypt from "bcryptjs";

const prisma = new PrismaClient();

async function createTestUsers() {
  try {
    console.log("üë• Cr√©ation des utilisateurs de test...");

    // Nouveaux mots de passe conformes RGPD/CNIL
    const adminPassword = "AdminStaka2025!"; // 14 caract√®res avec majuscules, minuscules, chiffres et symboles
    const userPassword = "UserTest2025!";   // 13 caract√®res avec majuscules, minuscules, chiffres et symboles

    // Hash des mots de passe
    const hashedAdminPassword = await bcrypt.hash(adminPassword, 12);
    const hashedUserPassword = await bcrypt.hash(userPassword, 12);

    // Cr√©er l'utilisateur admin
    const admin = await prisma.user.upsert({
      where: { email: "admin@staka-editions.com" },
      update: { 
        password: hashedAdminPassword,
        isActive: true 
      },
      create: {
        email: "admin@staka-editions.com",
        password: hashedAdminPassword,
        prenom: "Admin",
        nom: "Staka",
        role: Role.ADMIN,
        isActive: true
      }
    });

    // Cr√©er l'utilisateur test
    const user = await prisma.user.upsert({
      where: { email: "user@example.com" },
      update: { 
        password: hashedUserPassword,
        isActive: true 
      },
      create: {
        email: "user@example.com",
        password: hashedUserPassword,
        prenom: "User",
        nom: "Test",
        role: Role.USER,
        isActive: true
      }
    });

    console.log("‚úÖ Utilisateurs cr√©√©s/mis √† jour avec succ√®s !");
    console.log(`üë§ Admin: ${admin.email} (${admin.role})`);
    console.log(`üë§ User: ${user.email} (${user.role})`);

    console.log("\nüîê Nouveaux mots de passe des comptes de test :");
    console.log(`üìß admin@staka-editions.com -> ${adminPassword}`);
    console.log(`üìß user@example.com -> ${userPassword}`);

    console.log("\n‚úÖ Configuration termin√©e !");

  } catch (error) {
    console.error("‚ùå Erreur lors de la cr√©ation:", error);
  } finally {
    await prisma.$disconnect();
  }
}

createTestUsers();