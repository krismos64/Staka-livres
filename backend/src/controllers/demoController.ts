import { PrismaClient, Role } from "@prisma/client";
import { Request, Response } from "express";

const prisma = new PrismaClient();

/**
 * Contr√¥leur pour la gestion du mode d√©monstration
 * G√©n√®re et g√®re des vraies donn√©es fictives en base de donn√©es
 * 
 * D√©velopp√© par Christophe Mostefaoui - 27 Juillet 2025
 * Production d√©ploy√©e sur livrestaka.fr
 */

// Enums pour les statuts
enum StatutCommande {
  EN_ATTENTE = "EN_ATTENTE",
  EN_COURS = "EN_COURS",
  TERMINE = "TERMINE",
  ANNULEE = "ANNULEE"
}

enum StatutFacture {
  EN_ATTENTE = "EN_ATTENTE", 
  PAYEE = "PAYEE",
  ANNULEE = "ANNULEE"
}

// Donn√©es de r√©f√©rence pour la g√©n√©ration
const DEMO_USERS_DATA = [
  { prenom: "Marie", nom: "Dubois", email: "marie.dubois@demo.staka.fr" },
  { prenom: "Pierre", nom: "Martin", email: "pierre.martin@demo.staka.fr" },
  { prenom: "Sophie", nom: "Laurent", email: "sophie.laurent@demo.staka.fr" },
  { prenom: "Jean", nom: "Dupont", email: "jean.dupont@demo.staka.fr" },
  { prenom: "Anne", nom: "Moreau", email: "anne.moreau@demo.staka.fr" },
  { prenom: "Fran√ßois", nom: "Leclerc", email: "francois.leclerc@demo.staka.fr" },
];

const DEMO_BOOK_TITLES = [
  "Les Myst√®res de la For√™t Enchant√©e",
  "Voyage au C≈ìur de l'Imaginaire", 
  "M√©moires d'un Entrepreneur",
  "Guide Pratique du Jardinage Bio",
  "L'Art de la N√©gociation",
  "Histoire de France Moderne",
  "Recettes de Grand-M√®re",
  "Philosophie et Modernit√©",
];

const DEMO_DESCRIPTIONS = [
  "Roman fantasy captivant m√™lant aventure et magie",
  "R√©cit autobiographique touchant sur l'entrepreneuriat",
  "Guide complet pour d√©buter en jardinage √©cologique", 
  "Techniques avanc√©es de n√©gociation en entreprise",
  "Analyse historique de la p√©riode moderne fran√ßaise",
  "Collection de recettes traditionnelles familiales",
  "R√©flexions philosophiques sur notre √©poque",
  "T√©moignages du quotidien avec humour et sensibilit√©",
];

// Utilitaires
const getRandomElement = <T>(array: T[]): T => {
  return array[Math.floor(Math.random() * array.length)];
};

const generateRandomDate = (daysAgo: number): Date => {
  const now = new Date();
  const randomTime = now.getTime() - Math.random() * daysAgo * 24 * 60 * 60 * 1000;
  return new Date(randomTime);
};

const generateRandomPrice = (): number => {
  const prices = [39900, 49900, 59900, 79900, 99900, 119900];
  return getRandomElement(prices);
};

/**
 * Supprime toutes les donn√©es de d√©monstration
 */
const cleanupDemoData = async () => {
  const counts = {
    users: 0,
    commandes: 0, 
    factures: 0,
    messages: 0,
    notifications: 0,
  };

  try {
    // Compter avant suppression
    counts.users = await prisma.user.count({
      where: { email: { endsWith: "@demo.staka.fr" } }
    });
    
    // Supprimer les donn√©es dans l'ordre des d√©pendances
    await prisma.message.deleteMany({
      where: { conversationId: { startsWith: "demo-conv-" } }
    });
    
    // Note: selon votre sch√©ma, ajustez les suppressions
    await prisma.user.deleteMany({
      where: { email: { endsWith: "@demo.staka.fr" } }
    });
    
    console.log(`üßπ Nettoyage: ${counts.users} utilisateurs d√©mo supprim√©s`);
    
  } catch (error) {
    console.error("Erreur lors du nettoyage:", error);
  }
  
  return counts;
};

/**
 * G√©n√®re des utilisateurs de d√©monstration
 */
const generateDemoUsers = async () => {
  const users = [];
  
  for (const userData of DEMO_USERS_DATA) {
    try {
      const user = await prisma.user.create({
        data: {
          prenom: userData.prenom,
          nom: userData.nom,
          email: userData.email,
          password: "$2b$10$demopasswordhash.pour.demo.uniquement",
          role: Role.USER,
          isActive: Math.random() > 0.2, // 80% actifs
          createdAt: generateRandomDate(60),
          updatedAt: generateRandomDate(5),
        }
      });
      users.push(user);
    } catch (error) {
      console.log(`‚ö†Ô∏è Utilisateur ${userData.email} existe d√©j√† ou erreur:`, (error as Error).message);
    }
  }
  
  return users;
};

/**
 * G√©n√®re des commandes de d√©monstration
 */
const generateDemoCommandes = async (users: any[]) => {
  const commandes = [];
  
  for (let i = 0; i < 10; i++) {
    const user = getRandomElement(users);
    const statut = getRandomElement(Object.values(StatutCommande));
    const titre = getRandomElement(DEMO_BOOK_TITLES);
    const description = getRandomElement(DEMO_DESCRIPTIONS);
    
    try {
      const commande = await prisma.commande.create({
        data: {
          userId: user.id,
          titre,
          description,
          statut: statut as any,
          amount: generateRandomPrice(),
          priorite: "NORMALE" as any,
          createdAt: generateRandomDate(45),
          updatedAt: generateRandomDate(3),
        }
      });
      commandes.push(commande);
    } catch (error) {
      console.log(`‚ö†Ô∏è Erreur cr√©ation commande ${i}:`, (error as Error).message);
    }
  }
  
  return commandes;
};

/**
 * G√©n√®re des messages de d√©monstration
 */
const generateDemoMessages = async (users: any[]) => {
  const admin = await prisma.user.findFirst({
    where: { role: Role.ADMIN }
  });
  
  if (!admin) return [];
  
  const messages = [];
  const subjects = [
    "Question sur ma commande",
    "Demande de devis", 
    "Probl√®me technique",
    "Compliments sur le service",
  ];
  
  for (let i = 0; i < 8; i++) {
    const user = getRandomElement(users);
    
    try {
      const message = await prisma.message.create({
        data: {
          senderId: user.id,
          receiverId: admin.id,
          conversationId: `demo-conv-${i + 1}`,
          subject: getRandomElement(subjects),
          content: `Message de d√©monstration ${i + 1} de ${user.prenom}`,
          type: "USER_MESSAGE",
          statut: "ENVOYE",
          createdAt: generateRandomDate(30),
        }
      });
      messages.push(message);
    } catch (error) {
      console.log(`‚ö†Ô∏è Erreur cr√©ation message ${i}:`, (error as Error).message);
    }
  }
  
  return messages;
};

/**
 * POST /api/admin/demo/refresh
 * Rafra√Æchit les donn√©es de d√©monstration
 */
export const refreshDemoData = async (req: Request, res: Response) => {
  try {
    console.log("üé≠ [DEMO] D√©but du rafra√Æchissement des donn√©es de d√©monstration");
    
    // V√©rifier que l'utilisateur est admin
    if (!req.user || req.user.role !== Role.ADMIN) {
      return res.status(403).json({
        success: false,
        error: "Acc√®s refus√© - Administrateurs uniquement"
      });
    }
    
    // 1. Nettoyer les anciennes donn√©es de d√©mo
    console.log("üßπ Nettoyage des anciennes donn√©es...");
    const cleanupCounts = await cleanupDemoData();
    
    // 2. G√©n√©rer de nouvelles donn√©es
    console.log("üé≤ G√©n√©ration de nouvelles donn√©es...");
    
    const users = await generateDemoUsers();
    console.log(`‚úÖ ${users.length} utilisateurs de d√©mo cr√©√©s`);
    
    const commandes = await generateDemoCommandes(users);
    console.log(`‚úÖ ${commandes.length} commandes de d√©mo cr√©√©es`);
    
    const messages = await generateDemoMessages(users);
    console.log(`‚úÖ ${messages.length} messages de d√©mo cr√©√©s`);
    
    console.log("üé≠ [DEMO] Rafra√Æchissement termin√© avec succ√®s");
    
    res.status(200).json({
      success: true,
      message: "Donn√©es de d√©monstration rafra√Æchies avec succ√®s",
      data: {
        supprimees: cleanupCounts,
        creees: {
          users: users.length,
          commandes: commandes.length,
          factures: 0, // Pour l'instant
          messages: messages.length,
          notifications: 0, // Pour l'instant
        }
      }
    });
    
  } catch (error) {
    console.error("‚ùå [DEMO] Erreur lors du rafra√Æchissement:", error);
    
    res.status(500).json({
      success: false,
      error: "Erreur lors du rafra√Æchissement des donn√©es de d√©monstration",
      details: process.env.NODE_ENV === "development" ? (error as Error).message : undefined
    });
  }
};

/**
 * POST /api/admin/demo/reset
 * Remet les donn√©es de d√©monstration √† l'√©tat initial
 */
export const resetDemoData = async (req: Request, res: Response) => {
  try {
    console.log("üîÑ [DEMO] D√©but de la r√©initialisation des donn√©es de d√©monstration");
    
    // V√©rifier que l'utilisateur est admin
    if (!req.user || req.user.role !== Role.ADMIN) {
      return res.status(403).json({
        success: false,
        error: "Acc√®s refus√© - Administrateurs uniquement"
      });
    }
    
    // 1. Nettoyer toutes les donn√©es de d√©mo
    console.log("üßπ Suppression de toutes les donn√©es de d√©monstration...");
    const cleanupCounts = await cleanupDemoData();
    
    // 2. G√©n√©rer un jeu de donn√©es initial plus petit
    console.log("üéØ G√©n√©ration du jeu de donn√©es initial...");
    
    const users = await generateDemoUsers();
    const commandes = await generateDemoCommandes(users.slice(0, 4)); // Moins de commandes
    const messages = await generateDemoMessages(users.slice(0, 3)); // Moins de messages
    
    console.log("üîÑ [DEMO] R√©initialisation termin√©e avec succ√®s");
    
    res.status(200).json({
      success: true,
      message: "Donn√©es de d√©monstration r√©initialis√©es √† l'√©tat initial",
      data: {
        supprimees: cleanupCounts,
        initiales: {
          users: users.length,
          commandes: commandes.length,
          factures: 0,
          messages: messages.length,
          notifications: 0,
        }
      }
    });
    
  } catch (error) {
    console.error("‚ùå [DEMO] Erreur lors de la r√©initialisation:", error);
    
    res.status(500).json({
      success: false,
      error: "Erreur lors de la r√©initialisation des donn√©es de d√©monstration",
      details: process.env.NODE_ENV === "development" ? (error as Error).message : undefined
    });
  }
};

/**
 * GET /api/admin/demo/status
 * Retourne le statut des donn√©es de d√©monstration
 */
export const getDemoStatus = async (req: Request, res: Response) => {
  try {
    // V√©rifier que l'utilisateur est admin
    if (!req.user || req.user.role !== Role.ADMIN) {
      return res.status(403).json({
        success: false,
        error: "Acc√®s refus√© - Administrateurs uniquement"
      });
    }
    
    // Compter les vraies donn√©es de d√©mo en base
    const demoUsersCount = await prisma.user.count({
      where: { email: { endsWith: "@demo.staka.fr" } }
    });
    
    const demoMessagesCount = await prisma.message.count({
      where: { conversationId: { startsWith: "demo-conv-" } }
    });
    
    // Compter les commandes des utilisateurs d√©mo
    const demoUsers = await prisma.user.findMany({
      where: { email: { endsWith: "@demo.staka.fr" } },
      select: { id: true }
    });
    
    const demoCommandesCount = demoUsers.length > 0 ? await prisma.commande.count({
      where: { userId: { in: demoUsers.map(u => u.id) } }
    }) : 0;
    
    res.status(200).json({
      success: true,
      data: {
        demoDataExists: demoUsersCount > 0,
        counts: {
          users: demoUsersCount,
          commandes: demoCommandesCount,
          factures: 0, // √Ä impl√©menter
          messages: demoMessagesCount,
          notifications: 0, // √Ä impl√©menter
        },
        lastUpdate: new Date().toISOString(),
      }
    });
    
  } catch (error) {
    console.error("‚ùå [DEMO] Erreur lors de la v√©rification du statut:", error);
    
    res.status(500).json({
      success: false,
      error: "Erreur lors de la v√©rification du statut des donn√©es de d√©monstration"
    });
  }
};