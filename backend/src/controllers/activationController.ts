import { PrismaClient } from "@prisma/client";
import { Request, Response } from "express";
import bcrypt from "bcryptjs";
import { z } from "zod";
import { ActivationEmailService } from "../services/activationEmailService";
import { signToken } from "../utils/token";
import { notifyAdminNewRegistration } from "./notificationsController";

const prisma = new PrismaClient();

// Sch√©ma de validation pour l'activation avec mot de passe
const activateWithPasswordSchema = z.object({
  password: z.string().min(8, "Le mot de passe doit contenir au moins 8 caract√®res").max(100),
});

/**
 * Activer un compte utilisateur via token d'activation
 * Route: GET /api/public/activate/:token
 */
export const activateAccount = async (req: Request, res: Response): Promise<void> => {
  const ip = req.ip || req.connection.remoteAddress || 'unknown';
  const userAgent = req.get('user-agent') || 'unknown';

  try {
    const { token } = req.params;

    if (!token) {
      console.log(`‚ùå [ACTIVATION] Token manquant dans la requ√™te`);
      res.status(400).json({
        error: "Token manquant",
        message: "Le token d'activation est requis"
      });
      return;
    }

    console.log(`üîë [ACTIVATION] Tentative d'activation avec token: ${token}`);

    // Valider le token et r√©cup√©rer la commande en attente
    const pendingCommande = await ActivationEmailService.validateActivationToken(token);

    if (!pendingCommande) {
      console.log(`‚ùå [ACTIVATION] Token invalide, expir√© ou d√©j√† utilis√©: ${token}`);
      res.status(400).json({
        error: "Token invalide",
        message: "Le lien d'activation est invalide, expir√© ou a d√©j√† √©t√© utilis√©. Veuillez contacter le support si n√©cessaire."
      });
      return;
    }

    console.log(`‚úÖ [ACTIVATION] Token valide pour ${pendingCommande.email}`);

    // V√©rifier que l'utilisateur existe et r√©cup√©rer ses informations
    const user = await prisma.user.findUnique({
      where: { id: pendingCommande.userId! },
      select: {
        id: true,
        prenom: true,
        nom: true,
        email: true,
        isActive: true,
        role: true,
        createdAt: true
      }
    });

    if (!user) {
      console.error(`‚ùå [ACTIVATION] Utilisateur non trouv√© pour pendingCommande: ${pendingCommande.id}`);
      res.status(404).json({
        error: "Utilisateur non trouv√©",
        message: "L'utilisateur associ√© √† ce token n'existe pas"
      });
      return;
    }

    if (user.isActive) {
      console.log(`‚ö†Ô∏è [ACTIVATION] Compte d√©j√† actif pour ${user.email}`);
      res.status(400).json({
        error: "Compte d√©j√† activ√©",
        message: "Votre compte est d√©j√† activ√©. Vous pouvez vous connecter normalement."
      });
      return;
    }

    // Activer l'utilisateur
    const activatedUser = await prisma.user.update({
      where: { id: user.id },
      data: { 
        isActive: true,
        updatedAt: new Date()
      },
      select: {
        id: true,
        prenom: true,
        nom: true,
        email: true,
        role: true
      }
    });

    console.log(`üéâ [ACTIVATION] Compte activ√© avec succ√®s: ${activatedUser.email}`);

    // Marquer la commande en attente comme trait√©e
    await ActivationEmailService.markAsProcessed(pendingCommande.id);

    // Notifier les admins de la nouvelle inscription
    try {
      await notifyAdminNewRegistration(
        `${activatedUser.prenom} ${activatedUser.nom}`,
        activatedUser.email
      );
      console.log(`üîî [ACTIVATION] Notification admin envoy√©e pour ${activatedUser.email}`);
    } catch (notifError) {
      console.error(`‚ùå [ACTIVATION] Erreur notification admin:`, notifError);
      // Ne pas faire √©chouer l'activation pour un probl√®me de notification
    }

    // G√©n√©rer un JWT pour connexion automatique (optionnel)
    const jwtToken = signToken({
      userId: activatedUser.id,
      email: activatedUser.email,
      role: activatedUser.role
    });

    console.log(`üîê [ACTIVATION] JWT g√©n√©r√© pour connexion automatique: ${activatedUser.email}`);

    // Log de s√©curit√©
    console.log(`üîê [ACTIVATION AUDIT] ${new Date().toISOString()} - ACCOUNT_ACTIVATED - Email: ${activatedUser.email} - IP: ${ip} - UserAgent: ${userAgent?.substring(0, 100)}`);

    // R√©ponse avec les informations n√©cessaires pour le frontend
    res.status(200).json({
      message: "Compte activ√© avec succ√®s",
      success: true,
      user: {
        id: activatedUser.id,
        prenom: activatedUser.prenom,
        nom: activatedUser.nom,
        email: activatedUser.email,
        role: activatedUser.role
      },
      token: jwtToken, // Pour connexion automatique
      redirectUrl: `${process.env.FRONTEND_URL || 'http://localhost:3001'}/app/dashboard`
    });

  } catch (error) {
    console.error("‚ùå [ACTIVATION] Erreur lors de l'activation:", error);
    
    // Log de s√©curit√© pour l'erreur
    console.log(`üîê [ACTIVATION AUDIT ERROR] ${new Date().toISOString()} - ACTIVATION_ERROR - Token: ${req.params.token} - IP: ${ip} - UserAgent: ${userAgent?.substring(0, 100)} - Error: ${error instanceof Error ? error.message : 'Unknown'}`);
    
    res.status(500).json({
      error: "Erreur interne du serveur",
      message: "Impossible d'activer le compte. Veuillez r√©essayer ou contacter le support."
    });
  }
};

/**
 * V√©rifier le statut d'un token d'activation (sans l'activer)
 * Route: GET /api/public/activate/:token/verify
 */
export const verifyActivationToken = async (req: Request, res: Response): Promise<void> => {
  try {
    const { token } = req.params;

    if (!token) {
      res.status(400).json({
        error: "Token manquant",
        message: "Le token d'activation est requis"
      });
      return;
    }

    console.log(`üîç [ACTIVATION] V√©rification token: ${token}`);

    // Valider le token sans le consommer
    const pendingCommande = await ActivationEmailService.validateActivationToken(token);

    if (!pendingCommande) {
      res.status(400).json({
        error: "Token invalide",
        message: "Le lien d'activation est invalide, expir√© ou a d√©j√† √©t√© utilis√©",
        valid: false
      });
      return;
    }

    // V√©rifier que l'utilisateur existe
    const user = await prisma.user.findUnique({
      where: { id: pendingCommande.userId! },
      select: {
        id: true,
        prenom: true,
        nom: true,
        email: true,
        isActive: true
      }
    });

    if (!user) {
      res.status(404).json({
        error: "Utilisateur non trouv√©",
        message: "L'utilisateur associ√© √† ce token n'existe pas",
        valid: false
      });
      return;
    }

    const isAlreadyActive = user.isActive;

    res.status(200).json({
      message: "Token v√©rifi√©",
      valid: true,
      user: {
        prenom: user.prenom,
        nom: user.nom,
        email: user.email
      },
      isAlreadyActive,
      expiresAt: pendingCommande.tokenExpiresAt
    });

  } catch (error) {
    console.error("‚ùå [ACTIVATION] Erreur lors de la v√©rification:", error);
    res.status(500).json({
      error: "Erreur interne du serveur",
      message: "Impossible de v√©rifier le token",
      valid: false
    });
  }
};

/**
 * Activer un compte avec d√©finition de mot de passe
 * Route: POST /api/public/activate/:token/set-password
 */
export const activateAccountWithPassword = async (req: Request, res: Response): Promise<void> => {
  const ip = req.ip || req.connection.remoteAddress || 'unknown';
  const userAgent = req.get('user-agent') || 'unknown';

  try {
    const { token } = req.params;
    
    if (!token) {
      console.log(`‚ùå [ACTIVATION] Token manquant dans la requ√™te`);
      res.status(400).json({
        error: "Token manquant",
        message: "Le token d'activation est requis"
      });
      return;
    }

    // Validation du mot de passe
    const validationResult = activateWithPasswordSchema.safeParse(req.body);
    
    if (!validationResult.success) {
      console.log(`‚ùå [ACTIVATION] Validation mot de passe √©chou√©e:`, validationResult.error.errors);
      res.status(400).json({
        error: "Mot de passe invalide",
        message: "Le mot de passe doit contenir au moins 8 caract√®res",
        details: validationResult.error.errors
      });
      return;
    }

    const { password } = validationResult.data;

    console.log(`üîë [ACTIVATION] Tentative d'activation avec mot de passe pour token: ${token}`);

    // Valider le token et r√©cup√©rer la commande en attente
    const pendingCommande = await ActivationEmailService.validateActivationToken(token);

    if (!pendingCommande) {
      console.log(`‚ùå [ACTIVATION] Token invalide, expir√© ou d√©j√† utilis√©: ${token}`);
      res.status(400).json({
        error: "Token invalide",
        message: "Le lien d'activation est invalide, expir√© ou a d√©j√† √©t√© utilis√©."
      });
      return;
    }

    console.log(`‚úÖ [ACTIVATION] Token valide pour ${pendingCommande.email}`);

    // V√©rifier que l'utilisateur existe et r√©cup√©rer ses informations
    const user = await prisma.user.findUnique({
      where: { id: pendingCommande.userId! },
      select: {
        id: true,
        prenom: true,
        nom: true,
        email: true,
        isActive: true,
        role: true,
        password: true
      }
    });

    if (!user) {
      console.error(`‚ùå [ACTIVATION] Utilisateur non trouv√© pour pendingCommande: ${pendingCommande.id}`);
      res.status(404).json({
        error: "Utilisateur non trouv√©",
        message: "L'utilisateur associ√© √† ce token n'existe pas"
      });
      return;
    }

    if (user.isActive) {
      console.log(`‚ö†Ô∏è [ACTIVATION] Compte d√©j√† actif pour ${user.email}`);
      res.status(400).json({
        error: "Compte d√©j√† activ√©",
        message: "Votre compte est d√©j√† activ√©. Vous pouvez vous connecter normalement."
      });
      return;
    }

    // Hasher le nouveau mot de passe
    const saltRounds = 12;
    const passwordHash = await bcrypt.hash(password, saltRounds);

    // Activer l'utilisateur avec le nouveau mot de passe
    const activatedUser = await prisma.user.update({
      where: { id: user.id },
      data: { 
        isActive: true,
        password: passwordHash, // D√©finir le mot de passe choisi
        updatedAt: new Date()
      },
      select: {
        id: true,
        prenom: true,
        nom: true,
        email: true,
        role: true
      }
    });

    console.log(`üéâ [ACTIVATION] Compte activ√© avec mot de passe d√©fini: ${activatedUser.email}`);

    // Marquer la commande en attente comme trait√©e
    await ActivationEmailService.markAsProcessed(pendingCommande.id);

    // Notifier les admins de la nouvelle inscription
    try {
      await notifyAdminNewRegistration(
        `${activatedUser.prenom} ${activatedUser.nom}`,
        activatedUser.email
      );
      console.log(`üîî [ACTIVATION] Notification admin envoy√©e pour ${activatedUser.email}`);
    } catch (notifError) {
      console.error(`‚ùå [ACTIVATION] Erreur notification admin:`, notifError);
      // Ne pas faire √©chouer l'activation pour un probl√®me de notification
    }

    // G√©n√©rer un JWT pour connexion automatique
    const jwtToken = signToken({
      userId: activatedUser.id,
      email: activatedUser.email,
      role: activatedUser.role
    });

    console.log(`üîê [ACTIVATION] JWT g√©n√©r√© pour connexion automatique: ${activatedUser.email}`);

    // Log de s√©curit√©
    console.log(`üîê [ACTIVATION AUDIT] ${new Date().toISOString()} - ACCOUNT_ACTIVATED_WITH_PASSWORD - Email: ${activatedUser.email} - IP: ${ip} - UserAgent: ${userAgent?.substring(0, 100)}`);

    // R√©ponse avec les informations n√©cessaires pour le frontend
    res.status(200).json({
      message: "Compte activ√© avec succ√®s",
      success: true,
      user: {
        id: activatedUser.id,
        prenom: activatedUser.prenom,
        nom: activatedUser.nom,
        email: activatedUser.email,
        role: activatedUser.role
      },
      token: jwtToken, // Pour connexion automatique
      redirectUrl: `${process.env.FRONTEND_URL || 'http://localhost:3001'}/app/dashboard`
    });

  } catch (error) {
    console.error("‚ùå [ACTIVATION] Erreur lors de l'activation avec mot de passe:", error);
    
    // Log de s√©curit√© pour l'erreur
    console.log(`üîê [ACTIVATION AUDIT ERROR] ${new Date().toISOString()} - ACTIVATION_PASSWORD_ERROR - Token: ${req.params.token} - IP: ${ip} - UserAgent: ${userAgent?.substring(0, 100)} - Error: ${error instanceof Error ? error.message : 'Unknown'}`);
    
    res.status(500).json({
      error: "Erreur interne du serveur",
      message: "Impossible d'activer le compte. Veuillez r√©essayer ou contacter le support."
    });
  }
};