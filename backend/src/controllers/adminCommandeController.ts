import { StatutCommande } from "@prisma/client";
import { Request, Response } from "express";
import {
  AdminCommandeService,
  CommandeFilters,
} from "../services/adminCommandeService";

/**
 * Contr√¥leur pour la gestion administrative des commandes
 */
export class AdminCommandeController {
  /**
   * R√©cup√®re la liste des commandes avec filtres et pagination
   */
  static async getCommandes(req: Request, res: Response): Promise<void> {
    try {
      console.log(
        `üîç [ADMIN] ${req.user?.email} r√©cup√®re la liste des commandes`
      );
      console.log(`üîç [DEBUG] Query params re√ßus:`, req.query);

      // Param√®tres de pagination avec validation
      const page = Math.max(1, parseInt(req.query.page as string) || 1);
      const limit = Math.max(
        1,
        Math.min(100, parseInt(req.query.limit as string) || 10)
      ); // Limite max 100

      console.log(
        `üîç [DEBUG] Pagination apr√®s parsing: page=${page}, limit=${limit}`
      );

      // Construction des filtres
      const filters: CommandeFilters = {};

      // Filtre de recherche (trim pour √©viter les espaces)
      if (
        req.query.search &&
        typeof req.query.search === "string" &&
        req.query.search.trim()
      ) {
        filters.search = req.query.search.trim();
      }

      // Filtre par statut (validation de l'enum)
      if (req.query.statut && typeof req.query.statut === "string") {
        const statut = req.query.statut as StatutCommande;
        if (Object.values(StatutCommande).includes(statut)) {
          filters.statut = statut;
        } else {
          console.warn(
            `üö® [DEBUG] Statut invalide ignor√©: ${req.query.statut}`
          );
        }
      }

      // Filtre par client ID (validation UUID)
      if (
        req.query.clientId &&
        typeof req.query.clientId === "string" &&
        req.query.clientId.trim()
      ) {
        filters.clientId = req.query.clientId.trim();
      }

      // Filtres de date avec validation
      if (req.query.dateFrom && typeof req.query.dateFrom === "string") {
        const dateFrom = new Date(req.query.dateFrom);
        if (!isNaN(dateFrom.getTime())) {
          filters.dateFrom = dateFrom;
        } else {
          console.warn(
            `üö® [DEBUG] dateFrom invalide ignor√©e: ${req.query.dateFrom}`
          );
        }
      }

      if (req.query.dateTo && typeof req.query.dateTo === "string") {
        const dateTo = new Date(req.query.dateTo);
        if (!isNaN(dateTo.getTime())) {
          filters.dateTo = dateTo;
        } else {
          console.warn(
            `üö® [DEBUG] dateTo invalide ignor√©e: ${req.query.dateTo}`
          );
        }
      }

      console.log(`üîç [DEBUG] Filtres apr√®s parsing:`, filters);

      // Appel du service (sans Prisma inject√©, utilise l'instance par d√©faut)
      const result = await AdminCommandeService.getCommandes(
        page,
        limit,
        filters
      );

      console.log(
        `‚úÖ [ADMIN] ${result.data.length} commandes r√©cup√©r√©es depuis la DB`
      );

      res.status(200).json({
        message: "Liste des commandes r√©cup√©r√©e avec succ√®s",
        ...result,
        filters,
      });
    } catch (error) {
      console.error(
        "‚ùå [ADMIN] Erreur lors de la r√©cup√©ration des commandes:",
        error
      );
      res.status(500).json({
        error: "Erreur interne du serveur",
        message: "Impossible de r√©cup√©rer la liste des commandes",
      });
    }
  }

  /**
   * Met √† jour le statut d'une commande
   */
  static async updateCommandeStatut(
    req: Request,
    res: Response
  ): Promise<void> {
    try {
      const { id } = req.params;
      const { statut } = req.body;

      if (!id) {
        res.status(400).json({
          error: "ID commande requis",
          message: "Veuillez fournir un ID de commande valide",
        });
        return;
      }

      if (!statut) {
        res.status(400).json({
          error: "Statut requis",
          message: "Veuillez fournir un statut valide",
        });
        return;
      }

      console.log(
        `üîÑ [ADMIN] ${req.user?.email} met √† jour la commande ${id} vers ${statut}`
      );

      // Appel du service (sans Prisma inject√©, utilise l'instance par d√©faut)
      const updatedCommande = await AdminCommandeService.updateCommandeStatut(
        id,
        statut
      );

      console.log(`‚úÖ [ADMIN] Commande ${id} mise √† jour avec succ√®s`);

      res.status(200).json({
        message: "Statut de la commande mis √† jour avec succ√®s",
        commande: updatedCommande,
      });
    } catch (error: any) {
      console.error("‚ùå [ADMIN] Erreur lors de la mise √† jour:", error);

      if (error.message === "Commande non trouv√©e") {
        res.status(404).json({
          error: "Commande non trouv√©e",
          message: "La commande sp√©cifi√©e n'existe pas",
        });
        return;
      }

      if (error.message.includes("Statut invalide")) {
        res.status(400).json({
          error: "Statut invalide",
          message: error.message,
        });
        return;
      }

      res.status(500).json({
        error: "Erreur interne du serveur",
        message: "Impossible de mettre √† jour la commande",
      });
    }
  }

  /**
   * Supprime une commande
   */
  static async deleteCommande(req: Request, res: Response): Promise<void> {
    try {
      const { id } = req.params;

      if (!id) {
        res.status(400).json({
          error: "ID commande requis",
          message: "Veuillez fournir un ID de commande valide",
        });
        return;
      }

      console.log(`üóëÔ∏è [ADMIN] ${req.user?.email} supprime la commande ${id}`);

      // Appel du service (sans Prisma inject√©, utilise l'instance par d√©faut)
      await AdminCommandeService.deleteCommande(id);

      console.log(`‚úÖ [ADMIN] Commande ${id} supprim√©e avec succ√®s`);

      res.status(200).json({
        message: "Commande supprim√©e avec succ√®s",
      });
    } catch (error: any) {
      console.error("‚ùå [ADMIN] Erreur lors de la suppression:", error);

      if (error.message === "Commande non trouv√©e") {
        res.status(404).json({
          error: "Commande non trouv√©e",
          message: "La commande sp√©cifi√©e n'existe pas",
        });
        return;
      }

      res.status(500).json({
        error: "Erreur interne du serveur",
        message: "Impossible de supprimer la commande",
      });
    }
  }

  /**
   * R√©cup√®re une commande sp√©cifique par ID avec toutes les donn√©es d√©taill√©es
   */
  static async getCommandeById(req: Request, res: Response): Promise<void> {
    try {
      const { id } = req.params;

      if (!id) {
        res.status(400).json({
          error: "ID commande requis",
          message: "Veuillez fournir un ID de commande valide",
        });
        return;
      }

      console.log(
        `üîç [ADMIN] ${req.user?.email} r√©cup√®re la commande d√©taill√©e ${id}`
      );

      const commande = await AdminCommandeService.getCommandeById(id);

      console.log(
        `‚úÖ [ADMIN] Commande d√©taill√©e ${commande.titre} r√©cup√©r√©e avec succ√®s`
      );

      res.status(200).json({
        message: "Commande r√©cup√©r√©e avec succ√®s",
        data: commande,
      });
    } catch (error: any) {
      console.error(
        "‚ùå [ADMIN] Erreur lors de la r√©cup√©ration de la commande:",
        error
      );

      if (error.message === "Commande non trouv√©e") {
        res.status(404).json({
          error: "Commande introuvable",
          message: `Aucune commande trouv√©e avec l'ID ${req.params.id}`,
        });
      } else {
        res.status(500).json({
          error: "Erreur interne du serveur",
          message: "Impossible de r√©cup√©rer la commande",
        });
      }
    }
  }
}
