#!/usr/bin/env node
/**
 * Script pour nettoyer les variables d'environnement AWS apr√®s migration
 */

const fs = require('fs');
const path = require('path');

console.log('üßπ Nettoyage des variables AWS apr√®s migration vers stockage local\n');

// Variables AWS √† supprimer
const AWS_VARIABLES = [
  'AWS_ACCESS_KEY_ID',
  'AWS_SECRET_ACCESS_KEY', 
  'AWS_REGION',
  'AWS_S3_BUCKET',
  'S3_BUCKET_NAME'  // Alias parfois utilis√©
];

// Fichiers d'environnement √† traiter
const ENV_FILES = [
  '.env',
  '.env.local',
  '.env.production',
  '.env.example'
];

function cleanupEnvFile(filePath) {
  if (!fs.existsSync(filePath)) {
    console.log(`‚è≠Ô∏è  ${filePath} : fichier non trouv√©`);
    return;
  }

  const content = fs.readFileSync(filePath, 'utf8');
  const lines = content.split('\n');
  
  let modifiedLines = [];
  let removedCount = 0;
  let commentedCount = 0;
  
  for (const line of lines) {
    const trimmedLine = line.trim();
    
    // Identifier les lignes AWS
    const isAwsVariable = AWS_VARIABLES.some(awsVar => 
      trimmedLine.startsWith(`${awsVar}=`) || 
      trimmedLine.startsWith(`# ${awsVar}=`)
    );
    
    if (isAwsVariable) {
      if (trimmedLine.startsWith('#')) {
        // D√©j√† comment√©e, la supprimer compl√®tement
        console.log(`  üóëÔ∏è  Supprim√©: ${trimmedLine}`);
        removedCount++;
        continue;
      } else {
        // Commenter au lieu de supprimer pour garder une trace
        modifiedLines.push(`# DEPRECATED (migration S3‚ÜíLocal): ${line}`);
        console.log(`  üìù Comment√©: ${trimmedLine}`);
        commentedCount++;
      }
    } else {
      modifiedLines.push(line);
    }
  }
  
  if (removedCount > 0 || commentedCount > 0) {
    // Ajouter un commentaire explicatif
    const migrationComment = [
      '',
      '# ==============================================',
      '# AWS S3 Variables (deprecated after migration)',
      '# Migration date: ' + new Date().toISOString().split('T')[0],
      '# Status: Stockage local actif - Variables AWS supprim√©es',
      '# ==============================================',
      ''
    ];
    
    // Ins√©rer le commentaire au d√©but (apr√®s les √©ventuels commentaires existants)
    let insertIndex = 0;
    while (insertIndex < modifiedLines.length && 
           (modifiedLines[insertIndex].startsWith('#') || modifiedLines[insertIndex].trim() === '')) {
      insertIndex++;
    }
    
    modifiedLines.splice(insertIndex, 0, ...migrationComment);
    
    // Sauvegarder le fichier modifi√©
    fs.writeFileSync(filePath, modifiedLines.join('\n'));
    
    console.log(`‚úÖ ${filePath} : ${commentedCount} variables comment√©es, ${removedCount} supprim√©es`);
  } else {
    console.log(`‚úÖ ${filePath} : aucune variable AWS trouv√©e`);
  }
}

function createProductionEnvExample() {
  const productionEnvContent = `# Variables d'environnement - Production
# Apr√®s migration AWS S3 ‚Üí Stockage Local

# Base de donn√©es
DATABASE_URL="mysql://user:password@db:3306/stakalivres"

# JWT
JWT_SECRET="your_production_jwt_secret_here"

# URLs
FRONTEND_URL="https://livrestaka.fr"
PORT=3000

# E-mails (SendGrid)
SENDGRID_API_KEY="SG.your_sendgrid_key_here"
FROM_EMAIL="contact@staka.fr"
FROM_NAME="Staka Livres"
SUPPORT_EMAIL="contact@staka.fr"
ADMIN_EMAIL="contact@staka.fr"

# Stripe
STRIPE_SECRET_KEY="sk_live_your_stripe_secret_here"
STRIPE_WEBHOOK_SECRET="whsec_your_webhook_secret_here"

# ==============================================
# AWS Variables SUPPRIM√âES apr√®s migration
# Date: ${new Date().toISOString().split('T')[0]}
# Raison: Migration vers stockage local
# √âconomies: ~10‚Ç¨/mois
# ==============================================
# AWS_ACCESS_KEY_ID=     # ‚ùå Plus n√©cessaire
# AWS_SECRET_ACCESS_KEY= # ‚ùå Plus n√©cessaire  
# AWS_REGION=            # ‚ùå Plus n√©cessaire
# AWS_S3_BUCKET=         # ‚ùå Plus n√©cessaire
`;

  const examplePath = '.env.production.example';
  fs.writeFileSync(examplePath, productionEnvContent);
  console.log(`üìù Cr√©√©: ${examplePath} (template pour production)`);
}

function displayMigrationSummary() {
  console.log('\nüéØ R√©sum√© de la migration AWS:');
  console.log('   ‚úÖ Code: Migration S3 ‚Üí Stockage Local termin√©e');
  console.log('   ‚úÖ Variables: AWS env variables supprim√©es/comment√©es');
  console.log('   ‚úÖ Co√ªts: 0‚Ç¨/mois (au lieu de ~10‚Ç¨/mois)');
  console.log('   ‚úÖ D√©pendances: AWS SDK supprim√© du code actif');
  
  console.log('\nüìã Actions √† faire en production:');
  console.log('   1. D√©ployer le nouveau code');
  console.log('   2. Supprimer les variables AWS du .env production');  
  console.log('   3. Cr√©er les dossiers uploads/ avec bonnes permissions');
  console.log('   4. Optionnel: Migrer les fichiers S3 critiques');
  console.log('   5. Optionnel: Mettre √† jour les URLs en base de donn√©es');
  
  console.log('\nüîß Commandes post-d√©ploiement:');
  console.log('   mkdir -p uploads/{projects,invoices,messages}');
  console.log('   chmod 755 uploads/');
  console.log('   docker compose restart');
  
  console.log('\nüí∞ √âconomies annuelles pr√©vues: ~120‚Ç¨');
}

// Ex√©cution principale
console.log('üîç Recherche des fichiers .env...\n');

ENV_FILES.forEach(envFile => {
  cleanupEnvFile(envFile);
});

console.log('\nüìÑ Cr√©ation d\'un template .env production...\n');
createProductionEnvExample();

displayMigrationSummary();

console.log('\n‚úÖ Nettoyage AWS termin√© ! Le syst√®me est pr√™t pour la production sans AWS.');